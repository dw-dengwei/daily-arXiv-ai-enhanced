# 工作流名称
name: Daily Arxiv Digest & Deploy Website

on:
  schedule:
    # 每天在UTC时间16:30运行
    - cron: "30 16 * * *"
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main # 当推送到主分支时也触发，方便测试

jobs:
  # --- 任务1: 构建数据和网站文件 ---
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          #source /root/.cargo/env
          uv sync

      - name: Run Data Processing Pipeline
        id: run_scripts # 给这个步骤一个ID，方便后续引用它的输出
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          LANGUAGE: ${{ vars.LANGUAGE }}
          CATEGORIES: ${{ vars.CATEGORIES }}
          MODEL_NAME: ${{ vars.MODEL_NAME }}
          FALLBACK_MODELS: ${{ vars.FALLBACK_MODELS }}
        run: |
          source .venv/bin/activate
          
          # 动态定义文件名
          TODAY=$(date +"%Y-%m-%d")
          RAW_JSONL_FILE="data/$TODAY.jsonl"
          ENHANCED_JSONL_FILE="data/${TODAY}_AI_enhanced_${LANGUAGE:-Chinese}.jsonl"
          OUTPUT_MD_FILE="data/$TODAY.md"
          PAPER_TEMPLATE_FILE="to_md/paper_template.md"
          
          # 步骤 1: 运行Scrapy爬虫
          echo "Step 1: Fetching new papers from arXiv..."
          (cd daily_arxiv && scrapy crawl arxiv -o "../$RAW_JSONL_FILE")
          
          # 步骤 2: 运行AI增强脚本
          echo "Step 2: Enhancing paper data with AI..."
          python ai/enhance.py --data "$RAW_JSONL_FILE"
          
          # 步骤 3: 运行数据库构建脚本 (新)
          echo "Step 3: Building the JSON database for the website..."
          python build_database.py

          # 步骤 4: 生成Markdown报告
          echo "Step 4: Generating Markdown report..."
          python to_md/convert.py --input "$ENHANCED_JSONL_FILE" --template "$PAPER_TEMPLATE_FILE" --output "$OUTPUT_MD_FILE"
          
          # 步骤 5: 更新主 README.md
          echo "Step 5: Updating main README.md..."
          python update_readme.py
          
          # 将报告路径设置为输出，供后续步骤使用
          echo "report_path=$OUTPUT_MD_FILE" >> $GITHUB_OUTPUT

          echo "工作流成功完成！"
      
      # --- 全新增加的诊断步骤 ---
      - name: Run Diagnostics Before Commit
        if: always() # 无论之前的步骤是否成功，都运行此诊断
        run: |
          echo "================ DIAGNOSTICS ================"
          echo " "
          echo ">>> 1. Displaying content of .gitignore file:"
          cat .gitignore
          echo " "
          echo ">>> 2. Listing files in the 'data' directory:"
          ls -la data/
          echo " "
          echo ">>> 3. Displaying git status before 'git add':"
          git status
          echo " "
          echo "============================================="

      # --- 提交和推送代码的步骤 (保持不变) ---
      - name: Commit and push changes
        run: |
          git config --global user.email "${{ vars.EMAIL }}"
          git config --global user.name "${{ vars.NAME }}"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "update"
            git pull origin main --rebase
            git push
          else
            echo "No changes to commit."
          fi

      # --- 部署网站的步骤 (保持不变) ---
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
