{"id": "2509.15450", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.15450", "abs": "https://arxiv.org/abs/2509.15450", "authors": ["Abhishek Vijaya Kumar", "Arjun Devraj", "Rachee Singh"], "title": "PCCL: Photonic circuit-switched collective communication for distributed ML", "comment": null, "summary": "Modern distributed ML suffers from a fundamental gap between the theoretical\nand realized performance of collective communication algorithms due to\ncongestion and hop-count induced dilation in practical GPU clusters. We present\nPCCL, a Photonic Collective Communication Library that reconfigures the network\ntopology to match the communication patterns of collective algorithms, thereby\neliminating congestion and dilation by creating direct, contention-free\ncircuits between communicating GPUs. Unlike prior approaches that synthesize\nalgorithms for specific network topologies and collectives, PCCL generalizes to\nany collective primitive and any topology by adapting the network to match each\nalgorithm's communication pattern. PCCL's key innovation lies in its\nhardware-agnostic optimization framework that intelligently decides when to\nreconfigure based on the trade-off between network reconfiguration delay and\ncongestion/dilation costs, making it practical across different optical\nhardware with varying switching speeds. Our evaluation demonstrates that PCCL\nachieves up to 3X speedup over state-of-the-art algorithms on 128 GPUs across\nvarious workloads, buffer sizes, and topologies, translating to a 1.3X speedup\nin end-to-end training throughput.", "AI": {"tldr": "PCCL\u662f\u4e00\u4e2a\u5149\u5b50\u96c6\u4f53\u901a\u4fe1\u5e93\uff0c\u901a\u8fc7\u91cd\u65b0\u914d\u7f6e\u7f51\u7edc\u62d3\u6251\u4ee5\u5339\u914d\u5206\u5e03\u5f0fML\u4e2d\u7684\u96c6\u4f53\u7b97\u6cd5\u901a\u4fe1\u6a21\u5f0f\uff0c\u6d88\u9664\u62e5\u585e\u548c\u81a8\u80c0\uff0c\u5b9e\u73b0GPU\u95f4\u76f4\u63a5\u65e0\u4e89\u7528\u7535\u8def\u3002", "motivation": "\u73b0\u4ee3\u5206\u5e03\u5f0fML\u5728\u5b9e\u9645GPU\u96c6\u7fa4\u4e2d\u5b58\u5728\u7406\u8bba\u4e0e\u5b9e\u73b0\u6027\u80fd\u5dee\u8ddd\uff0c\u4e3b\u8981\u7531\u4e8e\u62e5\u585e\u548c\u8df3\u6570\u5f15\u8d77\u7684\u81a8\u80c0\u3002", "method": "PCCL\u9488\u5bf9\u4efb\u4f55\u96c6\u4f53\u539f\u8bed\u548c\u62d3\u6251\u901a\u7528\uff0c\u901a\u8fc7\u786c\u4ef6\u65e0\u5173\u4f18\u5316\u6846\u67b6\u667a\u80fd\u51b3\u5b9a\u4f55\u65f6\u91cd\u914d\u7f6e\u7f51\u7edc\uff0c\u6743\u8861\u91cd\u914d\u7f6e\u5ef6\u8fdf\u4e0e\u62e5\u585e/\u81a8\u80c0\u6210\u672c\u3002", "result": "\u5728128\u4e2aGPU\u4e0a\uff0cPCCL\u5728\u5404\u79cd\u5de5\u4f5c\u8d1f\u8f7d\u3001\u7f13\u51b2\u533a\u5927\u5c0f\u548c\u62d3\u6251\u4e0b\uff0c\u5b9e\u73b0\u9ad8\u8fbe3\u500d\u52a0\u901f\uff0c\u7aef\u5230\u7aef\u8bad\u7ec3\u541e\u5410\u91cf\u63d0\u53471.3\u500d\u3002", "conclusion": "PCCL\u901a\u8fc7\u5c06\u7f51\u7edc\u9002\u5e94\u7b97\u6cd5\u901a\u4fe1\u6a21\u5f0f\uff0c\u63d0\u4f9b\u663e\u8457\u6027\u80fd\u63d0\u5347\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u5149\u5b66\u786c\u4ef6\u3002"}}
{"id": "2509.15238", "categories": ["cs.MA", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.15238", "abs": "https://arxiv.org/abs/2509.15238", "authors": ["Dylan L\u00e9veill\u00e9"], "title": "Generating Plans for Belief-Desire-Intention (BDI) Agents Using Alternating-Time Temporal Logic (ATL)", "comment": "In Proceedings GandALF 2025, arXiv:2509.13258", "summary": "Belief-Desire-Intention (BDI) is a framework for modelling agents based on\ntheir beliefs, desires, and intentions. Plans are a central component of BDI\nagents, and define sequences of actions that an agent must undertake to achieve\na certain goal. Existing approaches to plan generation often require\nsignificant manual effort, and are mainly focused on single-agent systems. As a\nresult, in this work, we have developed a tool that automatically generates BDI\nplans using Alternating-Time Temporal Logic (ATL). By using ATL, the plans\ngenerated accommodate for possible competition or cooperation between the\nagents in the system. We demonstrate the effectiveness of the tool by\ngenerating plans for an illustrative game that requires agent collaboration to\nachieve a shared goal. We show that the generated plans allow the agents to\nsuccessfully attain this goal.", "AI": {"tldr": "A tool automatically generates BDI agent plans using ATL to support multi-agent cooperation and competition.", "motivation": "Existing BDI plan generation methods require significant manual effort and focus mainly on single-agent systems, lacking support for multi-agent interactions like competition or cooperation.", "method": "Develop a tool that uses Alternating-Time Temporal Logic (ATL) to automatically generate BDI plans, accommodating possible competition or cooperation between agents.", "result": "The tool generates effective plans, demonstrated in an illustrative game requiring agent collaboration, allowing agents to achieve the shared goal.", "conclusion": "The ATL-based tool successfully enables BDI agents to attain goals in multi-agent scenarios through automatically generated plans."}}
{"id": "2509.15847", "categories": ["cs.DC", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.15847", "abs": "https://arxiv.org/abs/2509.15847", "authors": ["Qianyu Yu", "Giuliano Losa", "Nibesh Shrestha", "Xuechao Wang"], "title": "Angelfish: Consensus with Optimal Throughput and Latency Across the Leader-DAG Spectrum", "comment": null, "summary": "To maximize performance, many modern blockchain systems rely on\neventually-synchronous, Byzantine fault-tolerant (BFT) consensus protocols. Two\nprotocol designs have emerged in this space: protocols that minimize latency\nusing a leader that drives both data dissemination and consensus, and protocols\nthat maximize throughput using a separate, asynchronous data dissemination\nlayer. Recent protocols such as Partially-Synchronous Bullshark and Sailfish\ncombine elements of both approaches by using a DAG to enable parallel data\ndissemination and a leader that paces DAG formation. This improves latency\nwhile achieving state-of-the-art throughput. Yet the latency of leader-based\nprotocols is still better under moderate loads.\n  We present Angelfish, a hybrid protocol that adapts smoothly across this\ndesign space, from leader-based to Sailfish-like DAG-based consensus. Angelfish\nlets a dynamically-adjusted subset of parties use best-effort broadcast to\nissue lightweight votes instead of reliably broadcasting costlier DAG vertices.\nThis reduces communication, helps lagging nodes catch up, and lowers latency in\npractice compared to prior DAG-based protocols. Our empirical evaluation shows\nthat Angelfish attains state-of-the-art peak throughput while matching the\nlatency of leader-based protocols under moderate throughput, delivering the\nbest of both worlds.", "AI": {"tldr": "Angelfish is a hybrid BFT consensus protocol that dynamically adapts between leader-based and DAG-based designs to balance latency and throughput in blockchain systems.", "motivation": "Modern BFT protocols face trade-offs: leader-based for low latency but lower throughput, DAG-based for high throughput but higher latency. Recent hybrids like Bullshark and Sailfish improve but leader-based still better for moderate loads.", "method": "Angelfish uses a leader to pace consensus, but allows a dynamic subset of parties to send lightweight votes via best-effort broadcast instead of full DAG vertices, reducing communication and aiding catch-up.", "result": "Empirical evaluation shows state-of-the-art peak throughput matching Sailfish, while achieving leader-based latency under moderate loads.", "conclusion": "Angelfish provides the best of both worlds, optimizing performance across varying loads."}}
{"id": "2509.15381", "categories": ["cs.MA"], "pdf": "https://arxiv.org/pdf/2509.15381", "abs": "https://arxiv.org/abs/2509.15381", "authors": ["Tiannan Zhang", "Rishi Veerapaneni", "Shao-Hung Chan", "Jiaoyang Li", "Maxim Likhachev"], "title": "Dynamic Agent Grouping ECBS: Scaling Windowed Multi-Agent Path Finding with Completeness Guarantees", "comment": null, "summary": "Multi-Agent Path Finding (MAPF) is the problem of finding a set of\ncollision-free paths for a team of agents. Although several MAPF methods which\nsolve full-horizon MAPF have completeness guarantees, very few MAPF methods\nthat plan partial paths have completeness guarantees. Recent work introduced\nthe Windowed Complete MAPF (WinC-MAPF) framework, which shows how windowed\noptimal MAPF solvers (e.g., SS-CBS) can use heuristic updates and disjoint\nagent groups to maintain completeness even when planning partial paths\n(Veerapaneni et al. 2024). A core limitation of WinC-MAPF is that they required\noptimal MAPF solvers. Our main contribution is to extend WinC-MAPF by showing\nhow we can use a bounded suboptimal solver while maintaining completeness. In\nparticular, we design Dynamic Agent Grouping ECBS (DAG-ECBS) which dynamically\ncreates and plans agent groups while maintaining that each agent group solution\nis bounded suboptimal. We prove how DAG-ECBS can maintain completeness in the\nWinC-MAPF framework. DAG-ECBS shows improved scalability compared to SS-CBS and\ncan outperform windowed ECBS without completeness guarantees. More broadly, our\nwork serves as a blueprint for designing more MAPF methods that can use the\nWinC-MAPF framework.", "AI": {"tldr": "\u6269\u5c55WinC-MAPF\u6846\u67b6\uff0c\u652f\u6301\u6709\u754c\u6b21\u4f18\u6c42\u89e3\u5668\u540c\u65f6\u4fdd\u6301\u5b8c\u5168\u6027\uff0c\u63d0\u51faDAG-ECBS\u65b9\u6cd5\uff0c\u63d0\u9ad8\u53ef\u6269\u5c55\u6027\u3002", "motivation": "\u73b0\u6709WinC-MAPF\u4f9d\u8d56\u6700\u4f18\u6c42\u89e3\u5668\uff0c\u9650\u5236\u4e86\u6548\u7387\uff1b\u65e8\u5728\u4f7f\u7528\u6709\u754c\u6b21\u4f18\u6c42\u89e3\u5668\u63d0\u5347\u53ef\u6269\u5c55\u6027\uff0c\u540c\u65f6\u7ef4\u6301\u5b8c\u5168\u6027\u3002", "method": "\u8bbe\u8ba1DAG-ECBS\uff0c\u901a\u8fc7\u52a8\u6001\u521b\u5efa\u4ee3\u7406\u7ec4\u5e76\u4f7f\u7528\u6709\u754c\u6b21\u4f18ECBS\u89c4\u5212\u8def\u5f84\uff0c\u8bc1\u660e\u5728WinC-MAPF\u6846\u67b6\u4e0b\u4fdd\u6301\u5b8c\u5168\u6027\u3002", "result": "DAG-ECBS\u6bd4SS-CBS\u66f4\u5177\u53ef\u6269\u5c55\u6027\uff0c\u4f18\u4e8e\u65e0\u5b8c\u5168\u6027\u4fdd\u8bc1\u7684\u7a97\u53e3ECBS\u3002", "conclusion": "\u4e3a\u8bbe\u8ba1\u66f4\u591a\u5229\u7528WinC-MAPF\u6846\u67b6\u7684MAPF\u65b9\u6cd5\u63d0\u4f9b\u84dd\u56fe\u3002"}}
{"id": "2509.15940", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.15940", "abs": "https://arxiv.org/abs/2509.15940", "authors": ["Guoliang He", "Youhe Jiang", "Wencong Xiao", "Kaihua Jiang", "Shuguang Wang", "Jun Wang", "Zixian Du", "Zhuo Jiang", "Xinlei Zhang", "Binhang Yuan", "Eiko Yoneki"], "title": "Efficient Pre-Training of LLMs via Topology-Aware Communication Alignment on More Than 9600 GPUs", "comment": "NeurIPS 2025", "summary": "The scaling law for large language models (LLMs) depicts that the path\ntowards machine intelligence necessitates training at large scale. Thus,\ncompanies continuously build large-scale GPU clusters, and launch training jobs\nthat span over thousands of computing nodes. However, LLM pre-training presents\nunique challenges due to its complex communication patterns, where GPUs\nexchange data in sparse yet high-volume bursts within specific groups.\nInefficient resource scheduling exacerbates bandwidth contention, leading to\nsuboptimal training performance. This paper presents Arnold, a scheduling\nsystem summarizing our experience to effectively align LLM communication\npatterns with data center topology at scale. An in-depth characteristic study\nis performed to identify the impact of physical network topology to LLM\npre-training jobs. Based on the insights, we develop a scheduling algorithm to\neffectively align communication patterns with the physical network topology in\nmodern data centers. Through simulation experiments, we show the effectiveness\nof our algorithm in reducing the maximum spread of communication groups by up\nto $1.67$x. In production training, our scheduling system improves the\nend-to-end performance by $10.6\\%$ when training with more than $9600$ GPUs, a\nsignificant improvement for our training pipeline.", "AI": {"tldr": "\u5927\u89c4\u6a21\u8bed\u8a00\u6a21\u578b(LLM)\u9884\u8bad\u7ec3\u9762\u4e34\u590d\u6742\u7684\u901a\u4fe1\u6a21\u5f0f\u6311\u6218\uff0cArnold\u8c03\u5ea6\u7cfb\u7edf\u901a\u8fc7\u5bf9\u9f50\u901a\u4fe1\u6a21\u5f0f\u4e0e\u6570\u636e\u4e2d\u5fc3\u62d3\u6251\u6765\u4f18\u5316\u6027\u80fd\u3002", "motivation": "LLM\u9884\u8bad\u7ec3\u9700\u8981\u5927\u89c4\u6a21GPU\u96c6\u7fa4\uff0c\u4f46\u901a\u4fe1\u6a21\u5f0f\u7a00\u758f\u4e14\u9ad8\u4f53\u79ef\uff0c\u5bfc\u81f4\u5e26\u5bbd\u4e89\u7528\u548c\u4f4e\u6548\u8c03\u5ea6\uff0c\u5f71\u54cd\u8bad\u7ec3\u6027\u80fd\u3002", "method": "\u8fdb\u884c\u7f51\u7edc\u62d3\u6251\u5bf9LLM\u9884\u8bad\u7ec3\u5f71\u54cd\u7684\u6df1\u5165\u7814\u7a76\uff0c\u5f00\u53d1\u8c03\u5ea6\u7b97\u6cd5\u4ee5\u5bf9\u9f50\u901a\u4fe1\u7ec4\u4e0e\u7269\u7406\u7f51\u7edc\u62d3\u6251\u3002", "result": "\u6a21\u62df\u5b9e\u9a8c\u4e2d\uff0c\u7b97\u6cd5\u5c06\u901a\u4fe1\u7ec4\u6700\u5927\u6269\u5c55\u51cf\u5c111.67\u500d\uff1b\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4f7f\u7528\u8d85\u8fc79600\u4e2aGPU\u65f6\uff0c\u7aef\u5230\u7aef\u6027\u80fd\u63d0\u534710.6%\u3002", "conclusion": "Arnold\u7cfb\u7edf\u663e\u8457\u6539\u5584\u4e86\u5927\u89c4\u6a21LLM\u8bad\u7ec3\u7ba1\u9053\u7684\u6027\u80fd\u3002"}}
