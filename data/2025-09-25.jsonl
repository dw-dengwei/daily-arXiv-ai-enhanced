{"id": "2509.19459", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.19459", "abs": "https://arxiv.org/abs/2509.19459", "authors": ["Yutong Guo", "Weiyu Luo", "Brian Demsky"], "title": "Automated Insertion of Flushes and Fences for Persistency", "comment": null, "summary": "CXL shared memory and persistent memory allow the contents of memory to\npersist beyond crashes. Stores to persistent or CXL memory are typically not\nimmediately made persistent; developers must manually flush the corresponding\ncache lines to force the data to be written to the underlying storage.\nCorrectly using flush and fence operations is known to be challenging. While\nstate-of-the-art tools can find missing flush instructions, they often require\nbug-revealing test cases. No existing tools can ensure the absence of missing\nflush bugs.\n  In this paper, we present PMRobust, a compiler that automatically inserts\nflush and fence operations to ensure that code using persistent memory is free\nfrom missing flush and fence bugs. PMRobust employs a novel static analysis\nwith optimizations that target newly allocated objects. We have evaluated\nPMRobust on persistent memory libraries and several persistent memory data\nstructures and measured a geometric mean overhead of 0.26% relative to the\noriginal benchmarks with hand-placed flush and fence operations."}
{"id": "2509.19533", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.19533", "abs": "https://arxiv.org/abs/2509.19533", "authors": ["Mengdi Lu", "Steven Ding", "Furkan Alaca", "Philippe Charland"], "title": "Semantic-Aware Fuzzing: An Empirical Framework for LLM-Guided, Reasoning-Driven Input Mutation", "comment": null, "summary": "Security vulnerabilities in Internet-of-Things devices, mobile platforms, and\nautonomous systems remain critical. Traditional mutation-based fuzzers -- while\neffectively explore code paths -- primarily perform byte- or bit-level edits\nwithout semantic reasoning. Coverage-guided tools such as AFL++ use\ndictionaries, grammars, and splicing heuristics to impose shallow structural\nconstraints, leaving deeper protocol logic, inter-field dependencies, and\ndomain-specific semantics unaddressed. Conversely, reasoning-capable large\nlanguage models (LLMs) can leverage pretraining knowledge to understand input\nformats, respect complex constraints, and propose targeted mutations, much like\nan experienced reverse engineer or testing expert. However, lacking ground\ntruth for \"correct\" mutation reasoning makes supervised fine-tuning\nimpractical, motivating explorations of off-the-shelf LLMs via prompt-based\nfew-shot learning. To bridge this gap, we present an open-source microservices\nframework that integrates reasoning LLMs with AFL++ on Google's FuzzBench,\ntackling asynchronous execution and divergent hardware demands (GPU- vs.\nCPU-intensive) of LLMs and fuzzers. We evaluate four research questions: (R1)\nHow can reasoning LLMs be integrated into the fuzzing mutation loop? (R2) Do\nfew-shot prompts yield higher-quality mutations than zero-shot? (R3) Can prompt\nengineering with off-the-shelf models improve fuzzing directly? and (R4) Which\nopen-source reasoning LLMs perform best under prompt-only conditions?\nExperiments with Llama3.3, Deepseek-r1-Distill-Llama-70B, QwQ-32B, and Gemma3\nhighlight Deepseek as the most promising. Mutation effectiveness depends more\non prompt complexity and model choice than shot count. Response latency and\nthroughput bottlenecks remain key obstacles, offering directions for future\nwork."}
{"id": "2509.19587", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.19587", "abs": "https://arxiv.org/abs/2509.19587", "authors": ["Mohamed Ouf", "Haoyu Li", "Michael Zhang", "Mariam Guizani"], "title": "Reverse Engineering User Stories from Code using Large Language Models", "comment": null, "summary": "User stories are essential in agile development, yet often missing or\noutdated in legacy and poorly documented systems. We investigate whether large\nlanguage models (LLMs) can automatically recover user stories directly from\nsource code and how prompt design impacts output quality. Using 1,750 annotated\nC++ snippets of varying complexity, we evaluate five state-of-the-art LLMs\nacross six prompting strategies. Results show that all models achieve, on\naverage, an F1 score of 0.8 for code up to 200 NLOC. Our findings show that a\nsingle illustrative example enables the smallest model (8B) to match the\nperformance of a much larger 70B model. In contrast, structured reasoning via\nChain-of-Thought offers only marginal gains, primarily for larger models."}
{"id": "2509.19673", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.19673", "abs": "https://arxiv.org/abs/2509.19673", "authors": ["Ahmed Aljohani", "Anamul Haque Mollah", "Hyunsook Do"], "title": "Assertion Messages with Large Language Models (LLMs) for Code", "comment": "Accepted at Proceedings of the 2025 Evaluation and Assessment in\n  Software Engineering (EASE '25)", "summary": "Assertion messages significantly enhance unit tests by clearly explaining the\nreasons behind test failures, yet they are frequently omitted by developers and\nautomated test-generation tools. Despite recent advancements, Large Language\nModels (LLMs) have not been systematically evaluated for their ability to\ngenerate informative assertion messages. In this paper, we introduce an\nevaluation of four state-of-the-art Fill-in-the-Middle (FIM) LLMs -\nQwen2.5-Coder-32B, Codestral-22B, CodeLlama-13B, and StarCoder - on a dataset\nof 216 Java test methods containing developer-written assertion messages. We\nfind that Codestral-22B achieves the highest quality score of 2.76 out of 5\nusing a human-like evaluation approach, compared to 3.24 for manually written\nmessages. Our ablation study shows that including descriptive test comments\nfurther improves Codestral's performance to 2.97, highlighting the critical\nrole of context in generating clear assertion messages. Structural analysis\ndemonstrates that all models frequently replicate developers' preferred\nlinguistic patterns. We discuss the limitations of the selected models and\nconventional text evaluation metrics in capturing diverse assertion message\nstructures. Our benchmark, evaluation results, and discussions provide an\nessential foundation for advancing automated, context-aware generation of\nassertion messages in test code. A replication package is available at\nhttps://doi.org/10.5281/zenodo.15293133"}
{"id": "2509.19512", "categories": ["cs.MA", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.19512", "abs": "https://arxiv.org/abs/2509.19512", "authors": ["Charles Dansereau", "Junior-Samuel Lopez-Yepez", "Karthik Soma", "Antoine Fagette"], "title": "The Heterogeneous Multi-Agent Challenge", "comment": "7 pages. To Appear at ECAI 2025", "summary": "Multi-Agent Reinforcement Learning (MARL) is a growing research area which\ngained significant traction in recent years, extending Deep RL applications to\na much wider range of problems. A particularly challenging class of problems in\nthis domain is Heterogeneous Multi-Agent Reinforcement Learning (HeMARL), where\nagents with different sensors, resources, or capabilities must cooperate based\non local information. The large number of real-world situations involving\nheterogeneous agents makes it an attractive research area, yet underexplored,\nas most MARL research focuses on homogeneous agents (e.g., a swarm of identical\nrobots). In MARL and single-agent RL, standardized environments such as ALE and\nSMAC have allowed to establish recognized benchmarks to measure progress.\nHowever, there is a clear lack of such standardized testbed for cooperative\nHeMARL. As a result, new research in this field often uses simple environments,\nwhere most algorithms perform near optimally, or uses weakly heterogeneous MARL\nenvironments."}
{"id": "2509.19478", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.19478", "abs": "https://arxiv.org/abs/2509.19478", "authors": ["Ziwei Wang", "Cong Wu", "Paolo Tasca"], "title": "Investigating Sharding Advancements, Methodologies, and Adoption Potential in Hedera", "comment": null, "summary": "Sharding has emerged as a critical solution to address the scalability\nchallenges faced by blockchain networks, enabling them to achieve higher\ntransaction throughput, reduced latency, and optimized resource usage. This\npaper investigates the advancements, methodologies, and adoption potential of\nsharding in the context of Hedera, a distributed ledger technology known for\nits unique Gossip about Gossip protocol and asynchronous Byzantine Fault\nTolerance (ABFT). We explore various academic and industrial sharding\ntechniques, emphasizing their benefits and trade-offs. Building on these\ninsights, we propose a hybrid sharding solution for Hedera that partitions the\nnetwork into local and global committees, facilitating efficient cross-shard\ntransactions and ensuring robust security through dynamic reconfiguration. Our\nanalysis highlights significant reductions in storage and communication\noverhead, improved scalability, and enhanced fault tolerance, demonstrating the\nfeasibility and advantages of integrating sharding into Hedera's architecture."}
{"id": "2509.19645", "categories": ["cs.PF", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.19645", "abs": "https://arxiv.org/abs/2509.19645", "authors": ["Youpeng Zhao", "Jinpeng LV", "Di Wu", "Jun Wang", "Christopher Gooley"], "title": "Are We Scaling the Right Thing? A System Perspective on Test-Time Scaling", "comment": null, "summary": "Test-time scaling (TTS) has recently emerged as a promising direction to\nexploit the hidden reasoning capabilities of pre-trained large language models\n(LLMs). However, existing scaling methods narrowly focus on the compute-optimal\nPareto-frontier, ignoring the simple fact that compute-optimal is not always\nsystem-optimal. In this work, we propose a system-driven perspective on TTS,\nanalyzing how reasoning models scale against practical metrics, such as latency\nand cost-per-token. By evaluating the impact of popular optimizations such as\ntensor parallelism and speculative decoding, our preliminary analysis reveals\nthe limitations of current methods and calls for a paradigm shift toward\nholistic, system-aware evaluations that capture the true essence of scaling\nlaws at inference time."}
{"id": "2509.19708", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.19708", "abs": "https://arxiv.org/abs/2509.19708", "authors": ["Anand Kumar", "Vishal Khare", "Deepak Sharma", "Satyam Kumar", "Vijay Saini", "Anshul Yadav", "Sachendra Jain", "Ankit Rana", "Pratham Verma", "Vaibhav Meena", "Avinash Edubilli"], "title": "Intuition to Evidence: Measuring AI's True Impact on Developer Productivity", "comment": "16 pages, 10 figures, 5 tables", "summary": "We present a comprehensive real-world evaluation of AI-assisted software\ndevelopment tools deployed at enterprise scale. Over one year, 300 engineers\nacross multiple teams integrated an in-house AI platform (DeputyDev) that\ncombines code generation and automated review capabilities into their daily\nworkflows. Through rigorous cohort analysis, our study demonstrates\nstatistically significant productivity improvements, including an overall 31.8%\nreduction in PR review cycle time.\n  Developer adoption was strong, with 85% satisfaction for code review features\nand 93% expressing a desire to continue using the platform. Adoption patterns\nshowed systematic scaling from 4% engagement in month 1 to 83% peak usage by\nmonth 6, stabilizing at 60% active engagement. Top adopters achieved a 61%\nincrease in code volume pushed to production, contributing to approximately 30\nto 40% of code shipped to production through this tool, accounting for an\noverall 28% increase in code shipment volume.\n  Unlike controlled benchmark evaluations, our longitudinal analysis provides\nempirical evidence from production environments, revealing both the\ntransformative potential and practical deployment challenges of integrating AI\ninto enterprise software development workflows."}
{"id": "2509.19599", "categories": ["cs.MA", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.19599", "abs": "https://arxiv.org/abs/2509.19599", "authors": ["Danilo Trombino", "Vincenzo Pecorella", "Alessandro de Giulii", "Davide Tresoldi"], "title": "Knowledge Base-Aware Orchestration: A Dynamic, Privacy-Preserving Method for Multi-Agent Systems", "comment": null, "summary": "Multi-agent systems (MAS) are increasingly tasked with solving complex,\nknowledge-intensive problems where effective agent orchestration is critical.\nConventional orchestration methods rely on static agent descriptions, which\noften become outdated or incomplete. This limitation leads to inefficient task\nrouting, particularly in dynamic environments where agent capabilities\ncontinuously evolve. We introduce Knowledge Base-Aware (KBA) Orchestration, a\nnovel approach that augments static descriptions with dynamic,\nprivacy-preserving relevance signals derived from each agent's internal\nknowledge base (KB). In the proposed framework, when static descriptions are\ninsufficient for a clear routing decision, the orchestrator prompts the\nsubagents in parallel. Each agent then assesses the task's relevance against\nits private KB, returning a lightweight ACK signal without exposing the\nunderlying data. These collected signals populate a shared semantic cache,\nproviding dynamic indicators of agent suitability for future queries. By\ncombining this novel mechanism with static descriptions, our method achieves\nmore accurate and adaptive task routing preserving agent autonomy and data\nconfidentiality. Benchmarks show that our KBA Orchestration significantly\noutperforms static description-driven methods in routing precision and overall\nsystem efficiency, making it suitable for large-scale systems that require\nhigher accuracy than standard description-driven routing."}
{"id": "2509.19532", "categories": ["cs.DC", "cs.NI"], "pdf": "https://arxiv.org/pdf/2509.19532", "abs": "https://arxiv.org/abs/2509.19532", "authors": ["Flavio Castro", "Weijian Zheng", "Joaquin Chung", "Ian Foster", "Rajkumar Kettimuthu"], "title": "To Stream or Not to Stream: Towards A Quantitative Model for Remote HPC Processing Decisions", "comment": null, "summary": "Modern scientific instruments generate data at rates that increasingly exceed\nlocal compute capabilities and, when paired with the staging and I/O overheads\nof file-based transfers, also render file-based use of remote HPC resources\nimpractical for time-sensitive analysis and experimental steering. Real-time\nstreaming frameworks promise to reduce latency and improve system efficiency,\nbut lack a principled way to assess their feasibility. In this work, we\nintroduce a quantitative framework and an accompanying Streaming Speed Score to\nevaluate whether remote high-performance computing (HPC) resources can provide\ntimely data processing compared to local alternatives. Our model incorporates\nkey parameters including data generation rate, transfer efficiency, remote\nprocessing power, and file input/output overhead to compute total processing\ncompletion time and identify operational regimes where streaming is beneficial.\nWe motivate our methodology with use cases from facilities such as APS, FRIB,\nLCLS-II, and the LHC, and validate our approach through an illustrative case\nstudy based on LCLS-II data. Our measurements show that streaming can achieve\nup to 97% lower end-to-end completion time than file-based methods under high\ndata rates, while worst-case congestion can increase transfer times by over an\norder of magnitude, underscoring the importance of tail latency in streaming\nfeasibility decisions."}
{"id": "2509.19701", "categories": ["cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2509.19701", "abs": "https://arxiv.org/abs/2509.19701", "authors": ["Akash Poptani", "Alireza Khadem", "Scott Mahlke", "Jonah Miller", "Joshua Dolence", "Reetuparna Das"], "title": "Characterizing Adaptive Mesh Refinement on Heterogeneous Platforms with Parthenon-VIBE", "comment": "Accepted to appear at IISWC 2025", "summary": "Hero-class HPC simulations rely on Adaptive Mesh Refinement (AMR) to reduce\ncompute and memory demands while maintaining accuracy. This work analyzes the\nperformance of Parthenon, a block-structured AMR benchmark, on CPU-GPU systems.\nWe show that smaller mesh blocks and deeper AMR levels degrade GPU performance\ndue to increased communication, serial overheads, and inefficient GPU\nutilization. Through detailed profiling, we identify inefficiencies, low\noccupancy, and memory access bottlenecks. We further analyze rank scalability\nand memory constraints, and propose optimizations to improve GPU throughput and\nreduce memory footprint. Our insights can inform future AMR deployments on\nDepartment of Energy's upcoming heterogeneous supercomputers."}
{"id": "2509.19918", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.19918", "abs": "https://arxiv.org/abs/2509.19918", "authors": ["Micheline Bénédicte Moumoula", "Serge Lionel Nikiema", "Albérick Euraste Djire", "Abdoul Kader Kabore", "Jacques Klein", "Tegawendé F. Bissyande"], "title": "Beyond Language Barriers: Multi-Agent Coordination for Multi-Language Code Generation", "comment": null, "summary": "Producing high-quality code across multiple programming languages is\nincreasingly important as today's software systems are built on heterogeneous\nstacks. Large language models (LLMs) have advanced the state of automated\nprogramming, yet their proficiency varies sharply between languages, especially\nthose with limited training data such as Rust, Perl, OCaml, and Erlang. Many\ncurrent solutions including language-specific fine-tuning, multi-agent\norchestration, transfer learning, and intermediate-representation pipelines\nstill approach each target language in isolation, missing opportunities to\nshare knowledge or exploit recurring cross-language patterns.\n  XL-CoGen tackles this challenge with a coordinated multi-agent architecture\nthat integrates intermediate representation, code generation, translation, and\nautomated repair. Its distinguishing feature is a data-driven mechanism for\nselecting bridging languages: empirically derived transfer matrices identify\nthe best intermediate languages based on demonstrated translation success\nrather than raw generation accuracy. The system performs early output\nvalidation, iteratively corrects errors, and reuses intermediate artifacts as\ncontextual scaffolds for subsequent translations.\n  Extensive experiments show that XL-CoGen yields notable improvements with 13\npercentage-point gains over the strongest fine-tuned baseline and as much as 30\npercentage points over existing single-language multi-agent methods. Ablation\nstudies further demonstrate that compatibility-guided bridging significantly\noutperforms LLM-based heuristics, confirming the value of cumulative\ncross-language knowledge transfer."}
{"id": "2509.19539", "categories": ["cs.DC", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.19539", "abs": "https://arxiv.org/abs/2509.19539", "authors": ["Raj Patel", "Umesh Biswas", "Surya Kodipaka", "Will Carroll", "Preston Peranich", "Maxwell Young"], "title": "A Survey of Recent Advancements in Secure Peer-to-Peer Networks", "comment": "30 pages, 4 figures, 2 tables", "summary": "Peer-to-peer (P2P) networks are a cornerstone of modern computing, and their\nsecurity is an active area of research. Many defenses with strong security\nguarantees have been proposed; however, the most-recent survey is over a decade\nold. This paper delivers an updated review of recent theoretical advances that\naddress classic threats, such as the Sybil and routing attacks, while\nhighlighting how emerging trends -- such as machine learning, social networks,\nand dynamic systems -- pose new challenges and drive novel solutions. We\nevaluate the strengths and weaknesses of these solutions and suggest directions\nfor future research."}
{"id": "2509.20010", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20010", "abs": "https://arxiv.org/abs/2509.20010", "authors": ["Xiaoning Ren", "Yuhang Ye", "Xiongfei Wu", "Yueming Wu", "Yinxing Xue"], "title": "Demystifying the Evolution of Neural Networks with BOM Analysis: Insights from a Large-Scale Study of 55,997 GitHub Repositories", "comment": "11pages,8figures", "summary": "Neural networks have become integral to many fields due to their exceptional\nperformance. The open-source community has witnessed a rapid influx of neural\nnetwork (NN) repositories with fast-paced iterations, making it crucial for\npractitioners to analyze their evolution to guide development and stay ahead of\ntrends. While extensive research has explored traditional software evolution\nusing Software Bill of Materials (SBOMs), these are ill-suited for NN software,\nwhich relies on pre-defined modules and pre-trained models (PTMs) with distinct\ncomponent structures and reuse patterns. Conceptual AI Bills of Materials\n(AIBOMs) also lack practical implementations for large-scale evolutionary\nanalysis. To fill this gap, we introduce the Neural Network Bill of Material\n(NNBOM), a comprehensive dataset construct tailored for NN software. We create\na large-scale NNBOM database from 55,997 curated PyTorch GitHub repositories,\ncataloging their TPLs, PTMs, and modules. Leveraging this database, we conduct\na comprehensive empirical study of neural network software evolution across\nsoftware scale, component reuse, and inter-domain dependency, providing\nmaintainers and developers with a holistic view of its long-term trends.\nBuilding on these findings, we develop two prototype applications,\n\\textit{Multi repository Evolution Analyzer} and \\textit{Single repository\nComponent Assessor and Recommender}, to demonstrate the practical value of our\nanalysis."}
{"id": "2509.19701", "categories": ["cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2509.19701", "abs": "https://arxiv.org/abs/2509.19701", "authors": ["Akash Poptani", "Alireza Khadem", "Scott Mahlke", "Jonah Miller", "Joshua Dolence", "Reetuparna Das"], "title": "Characterizing Adaptive Mesh Refinement on Heterogeneous Platforms with Parthenon-VIBE", "comment": "Accepted to appear at IISWC 2025", "summary": "Hero-class HPC simulations rely on Adaptive Mesh Refinement (AMR) to reduce\ncompute and memory demands while maintaining accuracy. This work analyzes the\nperformance of Parthenon, a block-structured AMR benchmark, on CPU-GPU systems.\nWe show that smaller mesh blocks and deeper AMR levels degrade GPU performance\ndue to increased communication, serial overheads, and inefficient GPU\nutilization. Through detailed profiling, we identify inefficiencies, low\noccupancy, and memory access bottlenecks. We further analyze rank scalability\nand memory constraints, and propose optimizations to improve GPU throughput and\nreduce memory footprint. Our insights can inform future AMR deployments on\nDepartment of Energy's upcoming heterogeneous supercomputers."}
{"id": "2509.20136", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20136", "abs": "https://arxiv.org/abs/2509.20136", "authors": ["Wei Zhang", "Jack Yang", "Renshuai Tao", "Lingzheng Chai", "Shawn Guo", "Jiajun Wu", "Xiaoming Chen", "Ganqu Cui", "Ning Ding", "Xander Xu", "Hu Wei", "Bowen Zhou"], "title": "V-GameGym: Visual Game Generation for Code Large Language Models", "comment": null, "summary": "Code large language models have demonstrated remarkable capabilities in\nprogramming tasks, yet current benchmarks primarily focus on single modality\nrather than visual game development. Most existing code-related benchmarks\nevaluate syntax correctness and execution accuracy, overlooking critical\ngame-specific metrics such as playability, visual aesthetics, and user\nengagement that are essential for real-world deployment. To address the gap\nbetween current LLM capabilities in algorithmic problem-solving and competitive\nprogramming versus the comprehensive requirements of practical game\ndevelopment, we present V-GameGym, a comprehensive benchmark comprising 2,219\nhigh-quality samples across 100 thematic clusters derived from real-world\nrepositories, adopting a novel clustering-based curation methodology to ensure\nboth diversity and structural completeness. Further, we introduce a multimodal\nevaluation framework with an automated LLM-driven pipeline for visual code\nsynthesis using complete UI sandbox environments. Our extensive analysis\nreveals that V-GameGym effectively bridges the gap between code generation\naccuracy and practical game development workflows, providing quantifiable\nquality metrics for visual programming and interactive element generation."}
{"id": "2509.19729", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.19729", "abs": "https://arxiv.org/abs/2509.19729", "authors": ["Haoyu Chen", "Xue Li", "Kun Qian", "Yu Guan", "Jin Zhao", "Xin Wang"], "title": "Gyges: Dynamic Cross-Instance Parallelism Transformation for Efficient LLM Inference", "comment": "12 pages, 15 figures", "summary": "Efficiently processing the dynamics of requests, especially the context\nlength variance, is important in Large Language Model (LLM) serving scenarios.\nHowever, there is an intrinsic trade-off: while leveraging parallelism\nstrategies, such as Tensor Parallelism (TP), can coordinate multiple GPUs to\naccommodate larger context lengths, it inevitably results in degraded overall\nthroughput. In this paper, we propose Cross-Instance Parallelism Transformation\n(Gyges), which adaptively adjusts the parallelism strategies of running\ninstances to align with the dynamics of incoming requests. We design (1) a\npage-friendly, header-centric layout to accelerate KV cache transformations;\n(2) dedicated weight padding to accelerate model weight transformations; and\n(3) a transformation-aware scheduler to cooperatively schedule requests and\nparallelism transformations, optimizing the overall performance. Evaluations\nusing real-world traces show that Gyges improves throughput by 1.75x-6.57x\ncompared to state-of-the-art solutions."}
{"id": "2509.20149", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20149", "abs": "https://arxiv.org/abs/2509.20149", "authors": ["Jianzhang Zhang", "Jialong Zhou", "Nan Niu", "Chuang Liu"], "title": "Enhancing Requirement Traceability through Data Augmentation Using Large Language Models", "comment": null, "summary": "Requirements traceability is crucial in software engineering to ensure\nconsistency between requirements and code. However, existing automated\ntraceability methods are constrained by the scarcity of training data and\nchallenges in bridging the semantic gap between artifacts. This study aims to\naddress the data scarcity problem in requirements traceability by employing\nlarge language models (LLMs) for data augmentation. We propose a novel approach\nthat utilizes prompt-based techniques with LLMs to generate augmented\nrequirement-to-code trace links, thereby enhancing the training dataset. Four\nLLMs (Gemini 1.5 Pro, Claude 3, GPT-3.5, and GPT-4) were used, employing both\nzero-shot and few-shot templates. Moreover, we optimized the encoder component\nof the tracing model to improve its efficiency and adaptability to augmented\ndata. The key contributions of this paper are: (1) proposing and evaluating\nfour prompt templates for data augmentation; (2) providing a comparative\nanalysis of four LLMs for generating trace links; (3) enhancing the model's\nencoder for improved adaptability to augmented datasets. Experimental results\nshow that our approach significantly enhances model performance, achieving an\nF1 score improvement of up to 28.59%, thus demonstrating its effectiveness and\npotential for practical application."}
{"id": "2509.19836", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.19836", "abs": "https://arxiv.org/abs/2509.19836", "authors": ["Ao Sun", "Weilin Zhao", "Xu Han", "Cheng Yang", "Zhiyuan Liu", "Chuan Shi", "Maosong sun"], "title": "BurstEngine: an Efficient Distributed Framework for Training Transformers on Extremely Long Sequences of over 1M Tokens", "comment": null, "summary": "Existing methods for training LLMs on long-sequence data, such as Tensor\nParallelism and Context Parallelism, exhibit low Model FLOPs Utilization as\nsequence lengths and number of GPUs increase, especially when sequence lengths\nexceed 1M tokens. To address these challenges, we propose BurstEngine, an\nefficient framework designed to train LLMs on long-sequence data. BurstEngine\nintroduces BurstAttention, an optimized distributed attention with lower\ncommunication cost than RingAttention. BurstAttention leverages topology-aware\nring communication to fully utilize network bandwidth and incorporates\nfine-grained communication-computation overlap. Furthermore, BurstEngine\nintroduces sequence-level selective checkpointing and fuses the language\nmodeling head with the loss function to reduce memory cost. Additionally,\nBurstEngine introduces workload balance optimization for various types of\nattention masking. By integrating these optimizations, BurstEngine achieves a\n$1.2\\times$ speedup with much lower memory overhead than the state-of-the-art\nbaselines when training LLMs on extremely long sequences of over 1M tokens. We\nhave made our code publicly available on GitHub:\nhttps://github.com/thunlp/BurstEngine."}
{"id": "2509.20172", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.20172", "abs": "https://arxiv.org/abs/2509.20172", "authors": ["Daniel Maninger", "Leon Chemnitz", "Amir Molzam Sharifloo", "Jannis Brugger", "Mira Mezini"], "title": "Benchmarking Web API Integration Code Generation", "comment": "To be published in Proceedings of 2nd ACM International Conference on\n  AI-powered Software, Benchmark & Dataset Track (AIware '25)", "summary": "API integration is a cornerstone of our digital infrastructure, enabling\nsoftware systems to connect and interact. However, as shown by many studies,\nwriting or generating correct code to invoke APIs, particularly web APIs, is\nchallenging. Although large language models~(LLMs) have become popular in\nsoftware development, their effectiveness in automating the generation of web\nAPI integration code remains unexplored. In order to address this, we present a\ndataset and evaluation pipeline designed to assess the ability of LLMs to\ngenerate web API invocation code. Our experiments with several open-source LLMs\nreveal that generating API invocations poses a significant challenge, resulting\nin hallucinated endpoints, incorrect argument usage, and other errors. None of\nthe evaluated open-source models were able to solve more than 40% of the tasks."}
{"id": "2509.20160", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.20160", "abs": "https://arxiv.org/abs/2509.20160", "authors": ["Prashanthi S. K.", "Sai Anuroop Kesanapalli", "Yogesh Simmhan"], "title": "Characterizing the Performance of Accelerated Jetson Edge Devices for Training Deep Learning Models", "comment": "Preprint of article in ACM SIGMETRICS 2023", "summary": "Deep Neural Networks (DNNs) have had a significant impact on domains like\nautonomous vehicles and smart cities through low-latency inferencing on edge\ncomputing devices close to the data source. However, DNN training on the edge\nis poorly explored. Techniques like federated learning and the growing capacity\nof GPU-accelerated edge devices like NVIDIA Jetson motivate the need for a\nholistic characterization of DNN training on the edge. Training DNNs is\nresource-intensive and can stress an edge's GPU, CPU, memory and storage\ncapacities. Edge devices also have different resources compared to workstations\nand servers, such as slower shared memory and diverse storage media. Here, we\nperform a principled study of DNN training on individual devices of three\ncontemporary Jetson device types: AGX Xavier, Xavier NX and Nano for three\ndiverse DNN model--dataset combinations. We vary device and training parameters\nsuch as I/O pipelining and parallelism, storage media, mini-batch sizes and\npower modes, and examine their effect on CPU and GPU utilization, fetch stalls,\ntraining time, energy usage, and variability. Our analysis exposes several\nresource inter-dependencies and counter-intuitive insights, while also helping\nquantify known wisdom. Our rigorous study can help tune the training\nperformance on the edge, trade-off time and energy usage on constrained\ndevices, and even select an ideal edge hardware for a DNN workload, and, in\nfuture, extend to federated learning too. As an illustration, we use these\nresults to build a simple model to predict the training time and energy per\nepoch for any given DNN across different power modes, with minimal additional\nprofiling."}
{"id": "2509.20215", "categories": ["cs.SE", "cs.AI", "cs.AR"], "pdf": "https://arxiv.org/pdf/2509.20215", "abs": "https://arxiv.org/abs/2509.20215", "authors": ["Guang Yang", "Wei Zheng", "Xiang Chen", "Yifan Sun", "Fengji Zhang", "Terry Yue Zhuo"], "title": "The Cream Rises to the Top: Efficient Reranking Method for Verilog Code Generation", "comment": "Under review ICASSP 2026", "summary": "LLMs face significant challenges in Verilog generation due to limited\ndomain-specific knowledge. While sampling techniques improve pass@k metrics,\nhardware engineers need one trustworthy solution rather than uncertain\ncandidates. To bridge this gap, we formulate it as a semantic alignment problem\nbetween requirements and Verilog implementations, and propose VCD-RNK, a\ndiscriminator model tailored for efficient Verilog code reranking.\nSpecifically, VCD-RNKincorporates Verilog-specific reasoning by distilling\nexpert knowledge across three dimensions: code semantic analysis, test case\ngeneration, and functional correctness assessment. By explicitly simulating the\nabove reasoning processes during inference, VCD-RNK effectively avoids\ncomputationally intensive test execution in existing methods."}
{"id": "2509.20189", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.20189", "abs": "https://arxiv.org/abs/2509.20189", "authors": ["Prashanthi S. K.", "Kunal Kumar Sahoo", "Amartya Ranjan Saikia", "Pranav Gupta", "Atharva Vinay Joshi", "Priyanshu Pansari", "Yogesh Simmhan"], "title": "Pagoda: An Energy and Time Roofline Study for DNN Workloads on Edge Accelerators", "comment": null, "summary": "Edge accelerators such as Nvidia Jetsons are becoming an integral part of the\ncomputing continuum, and are often used for DNN inferencing and training.\nNvidia Jetson edge devices have $2000$+ CUDA cores within a $70$W power\nenvelope and offer $1000$s of power modes to customize CPU, GPU and memory\nfrequencies. Their widely varying power--performance trade-offs can be\nexploited for energy and power-constrained deployments. While data-driven\nmethods to predict the power and latency of DNN workloads for edge devices\nexist, there is a lack of principled study to understand why edge accelerators\nand their power modes perform the way they do. We develop a time roofline and a\nnovel energy roofline model for the Jetson Orin AGX for diverse power modes,\nand couple it with an analytical model of the compute (FLOP) and memory access\n(bytes) for DNN inference workloads to analyze them from first principles.\nThese reveal unique, sometimes counter-intuitive, insights into the power and\nperformance behavior of DNN workloads on edge accelerators, e.g., the default\npower mode MAXN is not the most energy efficient and time efficiency implies\nenergy efficiency for all power modes. We also extend our analytical roofline\nmodels to DNN training. Finally, we apply these methods to tune the power mode\n(and hence the roofline) of the edge device to optimize the latency and energy\nfor DNN inference, with up to $15\\%$ lower energy and minimal degradation in\ninference time."}
{"id": "2509.20300", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20300", "abs": "https://arxiv.org/abs/2509.20300", "authors": ["Jannis Kiesel", "Jonathan Heiss"], "title": "Confidentiality-Preserving Verifiable Business Processes through Zero-Knowledge Proofs", "comment": null, "summary": "Ensuring the integrity of business processes without disclosing confidential\nbusiness information is a major challenge in inter-organizational processes.\nThis paper introduces a zero-knowledge proof (ZKP)-based approach for the\nverifiable execution of business processes while preserving confidentiality. We\nintegrate ZK virtual machines (zkVMs) into business process management engines\nthrough a comprehensive system architecture and a prototypical implementation.\nOur approach supports chained verifiable computations through proof\ncompositions. On the example of product carbon footprinting, we model\nsequential footprinting activities and demonstrate how organizations can prove\nand verify the integrity of verifiable processes without exposing sensitive\ninformation. We assess different ZKP proving variants within process models for\ntheir efficiency in proving and verifying, and discuss the practical\nintegration of ZKPs throughout the Business Process Management (BPM) lifecycle.\nOur experiment-driven evaluation demonstrates the automation of process\nverification under given confidentiality constraints."}
{"id": "2509.20205", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.20205", "abs": "https://arxiv.org/abs/2509.20205", "authors": ["Prashanthi S. K.", "Saisamarth Taluri", "Pranav Gupta", "Amartya Ranjan Saikia", "Kunal Kumar Sahoo", "Atharva Vinay Joshi", "Lakshya Karwa", "Kedar Dhule", "Yogesh Simmhan"], "title": "Fulcrum: Optimizing Concurrent DNN Training and Inferencing on Edge Accelerators", "comment": null, "summary": "The proliferation of GPU accelerated edge devices like Nvidia Jetsons and the\nrise in privacy concerns are placing an emphasis on concurrent DNN training and\ninferencing on edge devices. Inference and training have different computing\nand QoS goals. But edge accelerators like Jetson do not support native GPU\nsharing and expose 1000s of power modes. This requires careful time-sharing of\nconcurrent workloads to meet power--performance goals, while limiting costly\nprofiling. In this paper, we design an intelligent time-slicing approach for\nconcurrent DNN training and inferencing on Jetsons. We formulate an\noptimization problem to interleave training and inferencing minibatches, and\ndecide the device power mode and inference minibatch size, while maximizing the\ntraining throughput and staying within latency and power budgets, with modest\nprofiling costs. We propose GMD, an efficient multi-dimensional gradient\ndescent search which profiles just $15$ power modes; and ALS, an Active\nLearning technique which identifies reusable Pareto-optimal power modes, but\nprofiles $50$--$150$ power modes. We evaluate these within our Fulcrum\nscheduler for $273,000+$ configurations across $15$ DNN workloads. We also\nevaluate our strategies on dynamic arrival inference and concurrent inferences.\nALS and GMD outperform simpler and more complex baselines with larger-scale\nprofiling. Their solutions satisfy the latency and power budget for $>97\\%$ of\nour runs, and on average are within $7\\%$ of the optimal throughput."}
{"id": "2509.20308", "categories": ["cs.SE", "68M15 (Primary), 68M12, 68Q42 (Secondary)", "D.2.5; C.2.2; F.4.2"], "pdf": "https://arxiv.org/pdf/2509.20308", "abs": "https://arxiv.org/abs/2509.20308", "authors": ["Alexander Liggesmeyer", "José Antonio Zamudio Amaya", "Andreas Zeller"], "title": "Protocol Testing with I/O Grammars", "comment": "20 pages", "summary": "Generating software tests faces two fundamental problems. First, one needs to\n_generate inputs_ that are syntactically and semantically correct, yet\nsufficiently diverse to cover behavior. Second, one needs an _oracle_ to _check\noutputs_ whether a test case is correct or not. Both problems become apparent\nin _protocol testing_, where inputs are messages exchanged between parties, and\noutputs are the responses of these parties.\n  In this paper, we propose a novel approach to protocol testing that combines\ninput generation and output checking in a single framework. We introduce _I/O\ngrammars_ as the first means to _completely_ specify the syntax and semantics\nof protocols, including messages, states, and interactions. Our implementation,\nbased on the FANDANGO framework, takes a single I/O grammar, and can act as a\n_test generator_, as a _mock object_, and as an _oracle_ for a _client_, a\n_server_, or both (or actually any number of parties), a versatility not found\nin any existing tool or formalism. User-defined _constraints}_can have the\ngenerator focus on arbitrary protocol features; $k$-path guidance\nsystematically covers states, messages, responses, and value alternatives in a\nunified fashion.\n  We evaluate the effectiveness of our approach by applying it to several\nprotocols, including DNS, FTP, and SMTP. We demonstrate that I/O grammars can\nspecify advanced protocol features correctly and completely, while also\nenabling output validation of the programs under test. In its evaluation, we\nfind that systematic coverage of the I/O grammar results in much quicker\ncoverage of the input and response spaces (and thus functionality) compared to\nthe random-based state-of-the-art approaches."}
{"id": "2509.20223", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.20223", "abs": "https://arxiv.org/abs/2509.20223", "authors": ["Md Jueal Mia", "M. Hadi Amini"], "title": "An Empirical Analysis of Secure Federated Learning for Autonomous Vehicle Applications", "comment": "i3CE 2024, 2024 ASCE International Conference on Computing in Civil\n  Engineering", "summary": "Federated Learning lends itself as a promising paradigm in enabling\ndistributed learning for autonomous vehicles applications and ensuring data\nprivacy while enhancing and refining predictive model performance through\ncollaborative training on edge client vehicles. However, it remains vulnerable\nto various categories of cyber-attacks, necessitating more robust security\nmeasures to effectively mitigate potential threats. Poisoning attacks and\ninference attacks are commonly initiated within the federated learning\nenvironment to compromise secure system performance. Secure aggregation can\nlimit the disclosure of sensitive information from outsider and insider\nattackers of the federated learning environment. In this study, our aim is to\nconduct an empirical analysis on the transportation image dataset (e.g., LISA\ntraffic light) using various secure aggregation techniques and multiparty\ncomputation in the presence of diverse categories of cyber-attacks. Multiparty\ncomputation serves as a state-of-the-art security mechanism, offering standard\nprivacy for secure aggregation of edge autonomous vehicles local model updates\nthrough various security protocols. The presence of adversaries can mislead the\nautonomous vehicle learning model, leading to the misclassification of traffic\nlights, and resulting in detrimental impacts. This empirical study explores the\nresilience of various secure federated learning aggregation techniques and\nmultiparty computation in safeguarding autonomous vehicle applications against\nvarious cyber threats during both training and inference times."}
{"id": "2509.20353", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20353", "abs": "https://arxiv.org/abs/2509.20353", "authors": ["Viktoria Stray", "Elias Goldmann Brandtzæg", "Viggo Tellefsen Wivestad", "Astri Barbala", "Nils Brede Moe"], "title": "Developer Productivity With and Without GitHub Copilot: A Longitudinal Mixed-Methods Case Study", "comment": "Accepted for publication in the Proceedings of the 59th Hawaii\n  International Conference on System Sciences (HICSS 2026)", "summary": "This study investigates the real-world impact of the generative AI (GenAI)\ntool GitHub Copilot on developer activity and perceived productivity. We\nconducted a mixed-methods case study in NAV IT, a large public sector agile\norganization. We analyzed 26,317 unique non-merge commits from 703 of NAV IT's\nGitHub repositories over a two-year period, focusing on commit-based activity\nmetrics from 25 Copilot users and 14 non-users. The analysis was complemented\nby survey responses on their roles and perceived productivity, as well as 13\ninterviews. Our analysis of activity metrics revealed that individuals who used\nCopilot were consistently more active than non-users, even prior to Copilot's\nintroduction. We did not find any statistically significant changes in\ncommit-based activity for Copilot users after they adopted the tool, although\nminor increases were observed. This suggests a discrepancy between changes in\ncommit-based metrics and the subjective experience of productivity."}
{"id": "2509.20340", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.20340", "abs": "https://arxiv.org/abs/2509.20340", "authors": ["Liubov Kurafeeva", "Alan Subedi", "Ryan Hartung", "Michael Fay", "Avhishek Biswas", "Shantenu Jha", "Ozgur O. Kilic", "Chandra Krintz", "Andre Merzky", "Douglas Thain", "Mehmet C. Vuran", "Rich Wolski"], "title": "xGFabric: Coupling Sensor Networks and HPC Facilities with Private 5G Wireless Networks for Real-Time Digital Agriculture", "comment": "8 pages with 7 figures followed by 3 pages of reproducibility\n  appendix. This paper will be published following the SC 2025 conference on\n  November 16-21, 2025 at St Louis, MO, USA. ISBN: 978-8-4007-1871-7/2025/11", "summary": "Advanced scientific applications require coupling distributed sensor networks\nwith centralized high-performance computing facilities. Citrus Under Protective\nScreening (CUPS) exemplifies this need in digital agriculture, where citrus\nresearch facilities are instrumented with numerous sensors monitoring\nenvironmental conditions and detecting protective screening damage. CUPS\ndemands access to computational fluid dynamics codes for modeling environmental\nconditions and guiding real-time interventions like water application or\nrobotic repairs. These computing domains have contrasting properties: sensor\nnetworks provide low-performance, limited-capacity, unreliable data access,\nwhile high-performance facilities offer enormous computing power through\nhigh-latency batch processing. Private 5G networks present novel capabilities\naddressing this challenge by providing low latency, high throughput, and\nreliability necessary for near-real-time coupling of edge sensor networks with\nHPC simulations. This work presents xGFabric, an end-to-end system coupling\nsensor networks with HPC facilities through Private 5G networks. The prototype\nconnects remote sensors via 5G network slicing to HPC systems, enabling\nreal-time digital agriculture simulation."}
