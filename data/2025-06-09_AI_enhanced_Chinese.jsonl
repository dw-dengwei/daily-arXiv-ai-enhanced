{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL：通过推理数据和测试时计算扩展LLM以实现精确的RTL代码生成", "tldr": "ScaleRTL是首个用于RTL编码的推理LLM，通过大规模高质量推理数据和新颖的测试时扩展策略，在RTL代码生成方面实现了最先进的性能。", "motivation": "尽管大型语言模型（LLMs）在软件编码基准测试中取得了接近人类的性能，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的有效性仍然有限。先前的努力未能从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。", "method": "本文介绍了ScaleRTL，这是首个用于RTL编码的推理LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思维推理轨迹，平均每条56K tokens，形成了一个包含3.5B tokens的数据集，捕捉了丰富的RTL知识。通过对通用推理模型进行微调，得到了能够进行深度RTL推理的ScaleRTL。随后，通过一种新颖的测试时扩展策略，即通过迭代反思和自我纠正先前的推理步骤来扩展推理过程，进一步提高了ScaleRTL的性能。", "result": "ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上超越了18个有竞争力的基线高达18.4%，在RTLLM上高达12.7%。", "conclusion": "ScaleRTL通过结合大规模高质量推理数据和创新的测试时计算扩展策略，显著提升了LLMs在RTL代码生成方面的能力，并达到了当前最佳的性能水平。", "translation": "大型语言模型（LLMs）的最新进展使得在软件编码基准测试中能够实现接近人类的性能，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的有效性仍然有限。虽然先前的努力已经对LLMs进行了RTL任务的微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，这是首个用于RTL编码的推理LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思维推理轨迹，平均每条56K tokens，形成了一个包含3.5B tokens的数据集，捕捉了丰富的RTL知识。通过对通用推理模型进行微调，得到了能够进行深度RTL推理的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略，即通过迭代反思和自我纠正先前的推理步骤来扩展推理过程，进一步提高了ScaleRTL的性能。实验结果表明，ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上超越了18个有竞争力的基线高达18.4%，在RTLLM上高达12.7%。", "summary": "ScaleRTL是一个创新的大型语言模型，专门针对RTL（寄存器传输级）代码生成任务。它通过构建一个包含3.5B tokens的大规模、高质量链式思维推理数据集来克服现有模型的数据稀缺问题。模型在微调后能够进行深度RTL推理，并通过一种新颖的测试时自我纠正策略进一步增强性能。实验证明，ScaleRTL在VerilogEval和RTLLM基准测试中超越了现有基线，取得了显著的性能提升。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, 链式思维", "comments": "ScaleRTL的创新之处在于其双重扩展策略：一方面通过构建大规模高质量的链式思维推理数据集解决了RTL领域数据稀缺的问题，另一方面引入了独特的测试时自我纠正机制，这使得模型能够在推理过程中进行迭代优化。这对于推动LLMs在专业领域，特别是硬件设计自动化方面的应用具有重要意义。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina：通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计的系统，通过S^2算法和辐射缓存机制，以及专用加速器LuminCore，显著提升了移动设备上神经渲染的实时性和能效。", "motivation": "3D Gaussian Splatting (3DGS) 在当今的移动SoC上仍然计算量巨大，因此需要解决其在移动设备上的计算效率挑战。", "method": "Lumina是一个软硬件协同设计的系统，整合了两项主要优化：\n1. S^2算法：利用渲染中的时间相干性来减少计算开销。\n2. 辐射缓存（RC）机制：利用3DGS的颜色积分过程来降低密集光栅化计算的频率。\n此外，还提出了一个加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的基本低效问题。", "result": "Lumina相较于移动Volta GPU实现了4.5倍的速度提升和5.3倍的能耗降低。在合成和真实世界数据集上，质量损失可忽略不计（峰值信噪比降低 < 0.2 dB）。", "conclusion": "Lumina通过软硬件协同设计的方法，成功地解决了3DGS在移动设备上的计算效率问题，实现了实时、高效且高质量的移动神经渲染。", "translation": "3D高斯溅射（3DGS）极大地推动了神经渲染的进展，但其在当今的移动SoC上仍然计算量巨大。为了解决这一挑战，我们提出了Lumina，一个软硬件协同设计的系统，它整合了两个主要优化：一种新颖的算法S^2和一种辐射缓存（RC）机制，以提高神经渲染的效率。S^2算法利用渲染中的时间相干性来减少计算开销，而RC则利用3DGS的颜色积分过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的根本低效问题。我们展示了Lumina在合成和真实世界数据集上，相对于移动Volta GPU实现了4.5倍的速度提升和5.3倍的能耗降低，且质量损失可忽略不计（峰值信噪比降低 < 0.2 dB）。", "summary": "本文提出了Lumina，一个针对移动设备神经渲染的软硬件协同设计系统，旨在解决3D Gaussian Splatting在移动SoC上计算量大的问题。Lumina通过S^2算法利用时间相干性，辐射缓存机制减少光栅化频率，并设计了LuminCore加速器来优化缓存查找和光栅化效率。实验结果表明，Lumina在保持高质量的同时，实现了显著的速度提升和能耗降低。", "keywords": "神经渲染, 3D Gaussian Splatting, 移动计算, 硬件加速, 计算冗余", "comments": "该论文通过软硬件协同设计的方法，有效地解决了3DGS在移动设备上的性能瓶颈，其S^2算法和辐射缓存机制具有创新性，并且LuminCore加速器展现了对特定计算模式的深度优化。这对于推动神经渲染在边缘设备上的实际应用具有重要意义。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算用于图像识别的预处理方法", "tldr": "本文系统比较了忆阻器储层计算中不同的预处理方法对图像识别准确性和能耗的影响，并提出了一种新的基于奇偶校验的预处理方法，可将准确性提高2-6%。", "motivation": "忆阻器储层计算系统实现高性能仍具挑战性，且缺乏对输入预处理方法和储层大小影响的全面评估。", "method": "本文系统地比较了忆阻器储层计算系统的各种预处理方法，评估了它们对准确性和能耗的影响。此外，还提出了一种基于奇偶校验的预处理方法。", "result": "提出的基于奇偶校验的预处理方法将准确性提高了2-6%，且仅需适度增加器件数量。研究结果强调了明智的预处理策略对于提高忆阻器储层计算系统效率和可扩展性的重要性。", "conclusion": "明智的预处理策略对于提高忆阻器储层计算系统的效率和可扩展性至关重要。", "translation": "储层计算（RC）作为一种高效的循环神经网络架构，因其训练简化（仅需训练最后一个感知器读出层）而备受关注。当与忆阻器结合时，RC系统受益于其动态特性，使其成为储层构建的理想选择。然而，在基于忆阻器的RC中实现高性能仍然具有挑战性，因为它关键性地取决于输入预处理方法和储层大小。尽管兴趣日益增长，但目前仍缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器RC系统的各种预处理方法，评估了它们对准确性和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，该方法将准确性提高了2-6%，同时与其他方法相比，仅需适度增加器件数量。我们的研究结果强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "summary": "本文系统比较了忆阻器储层计算（RC）中不同的预处理方法，评估它们对图像识别准确性和能耗的影响。研究提出了一种新的基于奇偶校验的预处理方法，该方法在仅适度增加器件数量的情况下，将准确性提高了2-6%。研究强调了优化预处理策略对于提升忆阻器RC系统性能的重要性。", "keywords": "忆阻器储层计算, 预处理方法, 图像识别, 准确性, 能耗", "comments": "这篇论文通过系统比较和提出新方法，解决了忆阻器储层计算在图像识别中性能优化的关键问题。其创新在于提出了高效的奇偶校验预处理方法，对提升忆阻器RC的实际应用潜力具有重要意义。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION：基于内容寻址存储器的资源高效树形集成模型加速", "tldr": "RETENTION是一个端到端框架，通过迭代剪枝算法和树映射方案，显著减少了树形集成模型推理对内容寻址存储器（CAM）的容量需求，实现了资源高效的加速。", "motivation": "尽管深度学习在非结构化数据方面表现出色，但树形集成模型在结构化数据学习和信息提取方面仍具优势。现有加速树形模型的方法面临挑战，而利用内容寻址存储器（CAM）的方案存在内存消耗过大和利用率低的问题。", "method": "提出了RETENTION框架。具体方法包括：1) 一种带有新颖剪枝准则的迭代剪枝算法，专为基于Bagging的模型（如随机森林）设计，旨在最小化模型复杂性同时控制精度下降。2) 一种树映射方案，包含两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。", "result": "仅实施树映射方案可实现1.46倍至21.30倍的空间效率提升；完整的RETENTION框架在精度损失低于3%的情况下，实现了4.35倍至207.12倍的性能提升。", "conclusion": "RETENTION在降低内容寻址存储器容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面展现出卓越能力，但现代树形集成模型在提取相关信息和从结构化数据集中学习方面仍然更胜一筹。虽然已经做出了多项努力来加速树形模型，但模型固有的特性对传统加速器构成了重大挑战。最近利用内容寻址存储器（CAM）的研究为加速树形模型提供了一个有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION来解决这些挑战，RETENTION是一个端到端框架，显著降低了树形模型推理对CAM的容量需求。我们提出了一种带有新颖剪枝准则的迭代剪枝算法，该准则专为基于Bagging的模型（例如随机森林）量身定制，它在确保可控精度下降的同时最小化模型复杂性。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架在精度损失低于3%的情况下，实现了4.35倍至207.12倍的改进。这些结果表明，RETENTION在降低CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "summary": "这篇论文介绍了RETENTION，一个旨在加速树形集成模型推理的端到端框架，特别是在内容寻址存储器（CAM）上的应用。该框架通过一个迭代剪枝算法来减少模型复杂性并控制精度下降，同时提出了一种创新的树映射方案来优化CAM中的数据放置，从而显著降低了对CAM的容量需求并提高了空间效率。实验证明，RETENTION框架能大幅减少CAM容量需求，同时保持高精度。", "keywords": "树形集成模型, 内容寻址存储器, 模型加速, 资源高效, 剪枝算法", "comments": "这项工作通过创新的迭代剪枝算法和树映射方案，有效解决了内容寻址存储器（CAM）在加速树形模型时面临的内存效率低下问题。其主要创新点在于针对CAM特性优化树模型表示和存储，显著提升了资源效率，为硬件加速器设计提供了新的方向。"}}
