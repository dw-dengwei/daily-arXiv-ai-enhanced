{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL：利用推理数据和测试时计算扩展大型语言模型以实现精确的RTL代码生成", "tldr": "ScaleRTL是一个结合了高质量推理数据和测试时计算的RTL代码生成大型语言模型，在VerilogEval和RTLLM上取得了最先进的性能。", "motivation": "尽管大型语言模型在软件编码基准测试中表现出色，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的效果有限。先前的努力未能从根本上克服数据瓶颈，并且缺乏对测试时扩展的支持。", "method": "本文引入了ScaleRTL，它是第一个用于RTL编码的推理大型语言模型，通过扩展高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思考推理轨迹，平均每个56K token，形成了一个3.5B token的数据集，捕获了丰富的RTL知识。通过在此语料库上对通用推理模型进行微调，得到了能够进行深度RTL推理的ScaleRTL。随后，通过一种新颖的测试时扩展策略，即通过迭代反思和自我纠正先前的推理步骤来扩展推理过程，进一步增强了ScaleRTL的性能。", "result": "实验结果表明，ScaleRTL在VerilogEval和RTLLM上实现了最先进的性能，在VerilogEval上超越18个竞争基线高达18.4%，在RTLLM上高达12.7%。", "conclusion": "ScaleRTL是第一个通过高质量推理数据和测试时计算进行扩展的RTL编码推理大型语言模型，并在RTL代码生成任务上取得了最先进的性能。", "translation": "大型语言模型（LLM）最近的进展使得它们在软件编码基准测试中达到了接近人类的性能，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的有效性仍然有限。虽然之前的努力已经对LLM进行了RTL任务的微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，它是第一个用于RTL编码的推理LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思考推理轨迹，平均每个56K token，形成了一个3.5B token的数据集，捕获了丰富的RTL知识。在此语料库上对通用推理模型进行微调，得到了能够进行深度RTL推理的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略，即通过迭代反思和自我纠正先前的推理步骤来扩展推理过程，进一步增强了ScaleRTL的性能。实验结果表明，ScaleRTL在VerilogEval和RTLLM上实现了最先进的性能，在VerilogEval上超越18个竞争基线高达18.4%，在RTLLM上高达12.7%。", "summary": "本研究介绍了ScaleRTL，一个专为RTL代码生成设计的推理大型语言模型。针对现有LLM在RTL领域面临的数据稀缺和缺乏测试时扩展的问题，ScaleRTL通过构建一个包含3.5B token的高质量链式思考推理数据集来训练模型，并采用一种新颖的测试时自修正策略来增强推理能力。实验证明，ScaleRTL在VerilogEval和RTLLM基准测试上均达到了最先进的性能，显著优于现有基线。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, 链式思考", "comments": "ScaleRTL的创新之处在于其结合了大规模高质量推理数据（链式思考轨迹）的构建和独特的测试时计算扩展策略（迭代反思和自我纠正），这有效地解决了RTL代码生成中数据稀缺和推理能力不足的挑战。该方法为特定领域代码生成LLM的开发提供了新的思路，特别是在数据不易获取的领域。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina: 通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计的系统，通过S^2算法和RC机制，以及专门的LuminCore加速器，显著提升了移动设备上3D Gaussian Splatting神经渲染的效率和能效。", "motivation": "3D Gaussian Splatting (3DGS) 虽然极大地推动了神经渲染的进步，但它在当前的移动SoC上计算需求仍然很高，这限制了其在移动设备上的应用。", "method": "LLumina是一个软硬件协同设计的系统，它集成了两种主要的优化：\n1. S^2算法：利用渲染中的时间相干性来减少计算开销。\n2. 辐射缓存（RC）机制：利用3DGS的颜色集成过程来降低密集光栅化计算的频率。\n此外，还提出了一个加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的基本低效率问题。", "result": "Lumina在合成和真实世界数据集上，相比移动 Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，且质量损失微乎其微（峰值信噪比降低 < 0.2 dB）。", "conclusion": "Lumina通过软硬件协同设计，有效解决了移动设备上神经渲染的计算瓶颈，实现了高效率和低能耗的实时神经渲染，同时保持了良好的渲染质量。", "translation": "3D Gaussian Splatting (3DGS) 已经极大地推动了神经渲染的进步，但它在当今的移动SoC上仍然计算量巨大。为了解决这一挑战，我们提出了Lumina，一个软硬件协同设计的系统，它集成了两个主要的优化：一种新颖的算法S^2和一种辐射缓存机制RC，以提高神经渲染的效率。S^2算法利用渲染中的时间相干性来减少计算开销，而RC利用3DGS的颜色集成过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的基本低效率问题。我们展示了Lumina在合成和真实世界数据集上，相比移动 Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，且质量损失微乎其微（峰值信噪比降低 < 0.2 dB）。", "summary": "Lumina是一个软硬件协同设计的系统，旨在解决移动设备上3D Gaussian Splatting神经渲染的计算密集性问题。它通过S^2算法利用时间相干性减少计算，通过辐射缓存机制（RC）降低光栅化频率，并结合LuminCore加速器优化缓存查找和光栅化效率。实验结果表明，Lumina在保持渲染质量的同时，显著提高了移动神经渲染的速度和能效。", "keywords": "神经渲染, 3D Gaussian Splatting, 移动计算, 硬件加速, 计算冗余", "comments": "这篇论文通过软硬件协同设计，针对移动设备上的神经渲染（特别是3DGS）的计算密集性问题提出了创新解决方案。其创新点在于结合了算法（S^2和RC）和专门的硬件加速器（LuminCore），以系统性的方式提升效率和能效。该工作对于将高性能神经渲染技术推广到资源受限的移动平台具有重要意义。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算用于图像识别的预处理方法", "tldr": "本文系统比较了忆阻器储层计算中各种预处理方法，并提出了一种基于奇偶校验的预处理方法，该方法在适度增加设备数量的情况下提高了2-6%的准确性，强调了预处理策略对提高忆忆阻器储层计算系统效率和可扩展性的重要性。", "motivation": "在基于忆阻器的储层计算中实现高性能仍然具有挑战性，因为它关键地依赖于输入预处理方法和储层大小。尽管兴趣日益增长，但仍然缺乏量化这些因素影响的全面评估。", "method": "本文系统地比较了忆阻器储层计算系统中各种预处理方法，评估它们对准确性和能耗的影响。同时，提出了一种基于奇偶校验的预处理方法。", "result": "本文提出的基于奇偶校验的预处理方法在仅适度增加设备数量的情况下，将准确性提高了2-6%。研究结果强调了明智的预处理策略对于提高忆阻器储层计算系统效率和可扩展性的重要性。", "conclusion": "明智的预处理策略对于提高忆阻器储层计算系统（特别是忆阻器实现）的效率和可扩展性至关重要。", "translation": "储层计算 (RC) 作为一种高效的循环神经网络架构受到了关注，因为它简化了训练，只需要训练其最后一个感知器读出层。当用忆阻器实现时，RC 系统受益于其动态特性，这使得它们非常适合储层构建。然而，在基于忆阻器的 RC 中实现高性能仍然具有挑战性，因为它关键地依赖于输入预处理方法和储层大小。尽管兴趣日益增长，但仍然缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器 RC 系统的各种预处理方法，评估它们对准确性和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，该方法在与其他方法相比仅适度增加设备数量的情况下，将准确性提高了 2-6%。我们的发现强调了明智的预处理策略对于提高忆阻器 RC 系统的效率和可扩展性的重要性。", "summary": "忆阻器储层计算（RC）因其训练简化而备受关注，但在实现高性能方面仍面临挑战，尤其是在输入预处理方法和储层大小方面。本文系统比较了忆阻器RC中不同的预处理方法对准确性和能耗的影响，并提出了一种新的基于奇偶校验的预处理方法。实验结果表明，该方法在仅适度增加设备数量的情况下，能将准确性提高2-6%，强调了预处理策略对于提升忆阻器RC系统效率和可扩展性的重要性。", "keywords": "忆阻器储层计算, 预处理方法, 图像识别, 准确性, 能耗", "comments": "本文的创新点在于系统地评估了忆阻器储层计算中的多种预处理方法，并提出了一种有效的基于奇偶校验的新方法，显著提升了图像识别的准确性，为忆阻器计算的实际应用提供了重要的指导。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION：基于内容寻址存储器的资源高效树形集成模型加速", "tldr": "RETENTION是一个资源高效的框架，通过迭代剪枝算法和新颖的树映射方案，显著减少了内容寻址存储器（CAM）在加速树形模型时的容量需求，实现了显著的空间效率提升，且精度损失极小。", "motivation": "树形集成模型在处理结构化数据方面表现出色，但传统加速器难以应对其固有特性。尽管近期基于内容寻址存储器（CAM）的解决方案有前景，但存在内存消耗过大和利用率低的问题。本文旨在解决这些挑战。", "method": "本文提出了RETENTION，一个端到端框架。它包括：1. 一种迭代剪枝算法，具有针对Bagging模型（如随机森林）的新颖剪枝准则，旨在最小化模型复杂度同时确保可控的精度下降。2. 一种树映射方案，结合了两种创新的数据放置策略，以减轻CAM中“不关心”状态广泛使用导致的内存冗余。", "result": "独立的树映射方案实现了1.46倍至21.30倍的空间效率提升；完整的RETENTION框架在精度损失小于3%的情况下，实现了4.35倍至207.12倍的提升。", "conclusion": "RETENTION在降低CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面展现出卓越的能力，但现代树形集成模型在从结构化数据集中提取相关信息和学习方面仍然具有优势。尽管已经做出了一些努力来加速树形模型，但模型固有的特性对传统加速器构成了重大挑战。最近利用内容寻址存储器（CAM）的研究为加速树形模型提供了一个有前景的解决方案，但现有的设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION来解决这些挑战，RETENTION是一个端到端框架，显著降低了树形模型推理的CAM容量需求。我们提出了一种迭代剪枝算法，该算法具有针对Bagging模型（例如随机森林）的新颖剪枝准则，可以在确保可控的精度下降的同时，最小化模型复杂性。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架在精度损失小于3%的情况下，实现了4.35倍至207.12倍的提升。这些结果表明，RETENTION在降低CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "summary": "本文介绍了RETENTION，一个用于加速基于内容寻址存储器（CAM）的树形集成模型的端到端框架。它解决了现有基于CAM的解决方案中内存消耗高和利用率低的问题。RETENTION采用迭代剪枝算法来降低模型复杂性，并提出了一种新颖的树映射方案，结合数据放置策略以最小化内存冗余。实验结果表明，RETENTION显著提高了空间效率（高达207.12倍），且精度损失极小（<3%），为树形模型加速提供了一种资源高效的方法。", "keywords": "树形模型, 内容寻址存储器, 模型加速, 资源高效", "comments": "创新点：本文的创新在于通过结合模型剪枝和优化数据放置的方法，解决了基于CAM的树模型加速器特有的内存效率问题。为Bagging模型量身定制的迭代剪枝算法和新颖的树映射方案是其关键创新点。重要性：这项工作很重要，因为它通过显著降低资源需求，为基于CAM的树模型加速提供了一个实用的解决方案，这可能导致依赖树形模型的应用中更高效的硬件实现。局限性：摘要中未提及。"}}
