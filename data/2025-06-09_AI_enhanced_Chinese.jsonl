{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL: 利用推理数据和测试时计算扩展大型语言模型以实现精确的RTL代码生成", "tldr": "ScaleRTL是首个用于RTL编码的推理型大型语言模型，通过高质量推理数据和测试时计算扩展，在VerilogEval和RTLLM上实现了最先进的RTL代码生成性能。", "motivation": "大型语言模型在软件编码基准测试中表现出色，但在RTL代码生成方面的效果有限，原因在于高质量训练数据稀缺。先前的努力未能从根本上解决数据瓶颈，且由于其非推理性质，缺乏对测试时扩展的支持。", "method": "本文引入了ScaleRTL，这是首个用于RTL编码的推理型大型语言模型，它同时扩展了高质量推理数据和测试时计算。具体而言，作者整理了一套多样化的长链式思维推理轨迹（平均每个56K token），形成了包含3.5B token的数据集，捕获了丰富的RTL知识。通过在此语料库上对通用推理模型进行微调，得到了具备深度RTL推理能力的ScaleRTL。随后，通过一种新颖的测试时扩展策略进一步提升了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。", "result": "实验结果表明，ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上超越了18个有竞争力的基线模型高达18.4%，在RTLLM上超越了12.7%。", "conclusion": "ScaleRTL通过结合大规模推理数据和创新的测试时计算策略，显著提升了大型语言模型在RTL代码生成方面的能力，实现了最先进的性能。", "translation": "大型语言模型（LLMs）的最新进展已使它们在软件编码基准测试中达到接近人类的性能，但由于高质量训练数据的稀缺，它们在RTL代码生成方面的有效性仍然有限。虽然之前的努力已经针对RTL任务对LLMs进行了微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，这是首个用于RTL编码的推理型LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一套多样化的长链式思维推理轨迹，平均每个56K token，从而形成了一个包含3.5B token的数据集，捕获了丰富的RTL知识。在此语料库上对通用推理模型进行微调，产生了具备深度RTL推理能力的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略进一步增强了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。实验结果表明，ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上超越了18个有竞争力的基线模型高达18.4%，在RTLLM上超越了12.7%。", "summary": "本研究提出ScaleRTL，一个针对RTL代码生成的推理型大型语言模型，旨在克服现有LLM在RTL领域面临的数据稀缺和非推理性限制。ScaleRTL通过收集大量高质量的链式思维推理数据（3.5B token）进行微调，并引入一种迭代反思和自我纠正的测试时扩展策略。实验证明，ScaleRTL在VerilogEval和RTLLM基准测试上均达到了最先进的性能，显著优于现有模型。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, 链式思维", "comments": "这项工作具有重要的创新性，它首次将推理能力引入RTL代码生成领域，并有效解决了高质量数据稀缺和测试时扩展的挑战。通过构建大规模的链式思维推理数据集和提出迭代反思的测试时策略，ScaleRTL显著提升了LLMs在硬件描述语言生成方面的准确性，为未来LLMs在复杂硬件设计领域的应用奠定了基础。其方法论对其他专业领域LLM的开发也具有借鉴意义。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina：通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计的系统，通过S^2算法、辐射缓存和LuminCore加速器，显著提升了移动设备上3DGS神经渲染的实时性能和能效。", "motivation": "3D Gaussian Splatting (3DGS) 在移动SoC上计算开销巨大，难以实现实时性能。", "method": "提出了Lumina系统，一个软硬件协同设计方案。包含：S^2算法，利用渲染中的时间相干性减少计算开销；辐射缓存（RC）机制，利用3DGS的颜色积分过程，降低密集光栅化计算的频率；LuminCore加速器架构，进一步加速缓存查找并解决光栅化中的根本性低效率问题。", "result": "相较于移动Volta GPU，Lumina实现了4.5倍的速度提升和5.3倍的能耗降低，同时在合成和真实世界数据集上仅有微小的质量损失（< 0.2 dB峰值信噪比降低）。", "conclusion": "Lumina通过软硬件协同设计，有效解决了移动设备上3DGS神经渲染的计算瓶颈，实现了实时、高效的性能。", "translation": "3D高斯溅射（3DGS）极大地推动了神经渲染的进展，但它在当今的移动SoC上仍然计算量巨大。为了解决这一挑战，我们提出了Lumina，一个软硬件协同设计的系统，它集成了两项主要优化：一种新颖的S^2算法和一种辐射缓存（RC）机制，以提高神经渲染的效率。S^2算法利用渲染中的时间相干性来减少计算开销，而RC则利用3DGS的颜色积分过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的根本性低效率问题。我们展示了Lumina相对于移动Volta GPU实现了4.5倍的速度提升和5.3倍的能耗降低，同时在合成和真实世界数据集上仅有微小的质量损失（< 0.2 dB峰值信噪比降低）。", "summary": "本文提出Lumina，一个软硬件协同设计的系统，旨在解决3D高斯溅射（3DGS）在移动SoC上计算开销大的问题。Lumina集成了S^2算法（利用时间相干性）和辐射缓存机制（减少光栅化频率），并结合LuminCore加速器架构优化缓存查找和光栅化效率。实验表明，Lumina在保持渲染质量的同时，显著提升了移动神经渲染的速度和能效。", "keywords": "神经渲染, 3D高斯溅射, 移动计算, 软硬件协同设计, 实时渲染", "comments": "Lumina通过创新的软硬件协同设计，针对3DGS在移动设备上的计算瓶颈提出了高效解决方案。其核心创新在于结合了算法优化（S^2和RC）与专用硬件加速器（LuminCore），这对于推动神经渲染在边缘设备上的实际应用具有重要意义。该工作展示了在追求高性能的同时，如何通过精巧设计实现显著的能效提升，为未来移动神经渲染系统的发展提供了有价值的参考。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算在图像识别中的预处理方法", "tldr": "本文系统比较了忆阻器储层计算的预处理方法，并提出了一种新的奇偶校验预处理方法，显著提高了图像识别的准确性。", "motivation": "储层计算（RC）作为一种高效的循环神经网络架构备受关注，特别是在忆阻器实现时。然而，忆阻器RC系统的高性能实现仍然具有挑战性，这主要取决于输入预处理方法和储层大小。目前缺乏对这些因素影响的全面评估。", "method": "本文系统地比较了忆阻器RC系统中的各种预处理方法，评估了它们对准确性和能耗的影响。作者还提出了一种基于奇偶校验的预处理方法。", "result": "研究结果表明，所提出的奇偶校验预处理方法能够将准确性提高2-6%，同时与其它方法相比，只增加了适度的设备数量。研究强调了知情预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "conclusion": "知情的预处理策略对于提高忆阻器储层计算系统的效率和可扩展性至关重要，本文提出的奇偶校验方法可以有效提高准确性。", "translation": "储层计算（RC）作为一种高效的循环神经网络架构，因其简化的训练（只需训练其最后一个感知器读出层）而受到关注。当用忆阻器实现时，RC系统受益于其动态特性，这使得它们成为储层构建的理想选择。然而，在基于忆阻器的RC中实现高性能仍然具有挑战性，因为它关键性地取决于输入预处理方法和储层大小。尽管兴趣日益增长，但仍缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器RC系统中的各种预处理方法，评估了它们对准确性和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，该方法将准确性提高了2-6%，同时与其它方法相比，只增加了适度的设备数量。我们的研究结果强调了知情预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "summary": "本文系统比较了忆阻器储层计算（RC）在图像识别中的各种预处理方法，以解决其性能挑战。研究评估了预处理方法对准确性和能耗的影响，并提出了一种基于奇偶校验的预处理方法，该方法在仅适度增加设备数量的情况下，将准确性提高了2-6%。研究结果强调了优化预处理策略对于提高忆阻器RC系统效率和可扩展性的关键作用。", "keywords": "忆阻器储层计算, 图像识别, 预处理方法, 奇偶校验, 准确性", "comments": "本文通过系统比较和提出新的预处理方法，解决了忆阻器储层计算在图像识别中性能优化的关键问题。其创新点在于提出了一种基于奇偶校验的预处理方法，能在精度提升的同时控制硬件开销，对于提升忆阻器RC系统的实用性具有重要意义。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION：基于内容寻址存储器的资源高效树集成模型加速", "tldr": "RETENTION是一个端到端框架，通过迭代剪枝算法和创新的树映射方案，显著减少了内容寻址存储器（CAM）在树集成模型推理中的容量需求，实现了更高的空间效率和较低的精度损失。", "motivation": "尽管深度学习在非结构化数据方面表现出色，但现代树集成模型在结构化数据处理上仍具优势。现有加速树模型的方法面临挑战，而利用内容寻址存储器（CAM）的方案又存在内存消耗过大和利用率低的问题。", "method": "本文提出了RETENTION框架，旨在减少CAM容量需求。具体方法包括：1. 提出了一种针对Bagging模型（如随机森林）的迭代剪枝算法，该算法具有新颖的剪枝准则，可在控制精度下降的同时最小化模型复杂度。2. 引入了一种树映射方案，包含两种创新的数据放置策略，以缓解CAM中“不关心”状态广泛使用导致的内存冗余。", "result": "实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升；而完整的RETENTION框架则可实现4.35倍至207.12倍的改进，同时精度损失小于3%。", "conclusion": "RETENTION在降低CAM容量需求方面非常有效，为树集成模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面表现出卓越的能力，但现代树集成模型在提取相关信息和从结构化数据集中学习方面仍然更胜一筹。虽然已经做出了多项努力来加速树集成模型，但模型的固有特性给传统加速器带来了重大挑战。最近利用内容寻址存储器（CAM）的研究为加速树集成模型提供了一个有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION解决了这些挑战，RETENTION是一个端到端框架，可显著降低树集成模型推理的CAM容量需求。我们提出了一种迭代剪枝算法，该算法具有为基于Bagging的模型（例如随机森林）量身定制的新颖剪枝准则，可在确保受控精度下降的同时最小化模型复杂度。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以缓解CAM中“不关心”状态广泛使用导致的内存冗余。实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架则可实现4.35倍至207.12倍的改进，同时精度损失小于3%。这些结果表明RETENTION在降低CAM容量需求方面非常有效，为树集成模型加速提供了一个资源高效的方向。", "summary": "本文介绍了RETENTION，一个旨在优化树集成模型在内容寻址存储器（CAM）上推理效率的端到端框架。针对现有CAM方案的内存消耗和利用率问题，RETENTION提出了一种迭代剪枝算法以降低模型复杂度和一种创新的树映射方案以减少内存冗余。实验证明，RETENTION显著提升了空间效率，同时保持了高精度，为树集成模型加速提供了资源高效的解决方案。", "keywords": "树集成模型, 内容寻址存储器, 模型加速, 剪枝算法, 内存效率", "comments": "本文提出了一种新颖的框架RETENTION，有效解决了在利用内容寻址存储器（CAM）加速树集成模型时面临的内存效率低下和利用率低的问题。其创新点在于结合了专为Bagging模型设计的迭代剪枝算法和创新的树映射策略，显著提升了空间效率。这对于资源受限的环境或需要高效部署树模型AI推理的场景具有重要意义。该研究为硬件加速树模型提供了一个有价值且资源高效的方向。"}}
