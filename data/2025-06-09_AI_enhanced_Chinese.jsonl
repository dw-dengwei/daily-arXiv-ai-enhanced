{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL：利用推理数据和测试时计算扩展LLM以实现准确的RTL代码生成", "tldr": "ScaleRTL是一个新的推理LLM，通过大规模高质量推理数据和测试时计算，显著提升了RTL代码生成性能，在VerilogEval和RTLLM上实现了最先进的水平。", "motivation": "现有大型语言模型（LLMs）在RTL代码生成方面的效果有限，主要原因是高质量训练数据稀缺，且缺乏对测试时扩展的支持，未能从根本上克服数据瓶颈。", "method": "本文引入了ScaleRTL，通过以下方法实现：1. 收集并整理了平均56K tokens的链式思考推理轨迹，构建了一个包含3.5B tokens的RTL知识数据集。2. 在此数据集上对通用推理模型进行微调，得到ScaleRTL。3. 提出了一种新颖的测试时扩展策略，通过迭代反思和自我纠正先前的推理步骤来延长推理过程，进一步提升性能。", "result": "ScaleRTL在VerilogEval和RTLLM上实现了最先进的性能，在VerilogEval上超越18个竞争基线高达18.4%，在RTLLM上超越12.7%。", "conclusion": "ScaleRTL通过结合大规模高质量推理数据和创新的测试时计算策略，有效克服了RTL代码生成中LLM面临的数据稀疏和推理能力限制，显著提升了性能，达到了领先水平。", "translation": "标题：ScaleRTL：利用推理数据和测试时计算扩展LLM以实现准确的RTL代码生成\n摘要：大型语言模型（LLMs）的最新进展使得在软件编码基准测试上实现了接近人类的性能，但由于高质量训练数据的稀缺，它们在RTL代码生成方面的有效性仍然有限。虽然之前的努力已经针对RTL任务对LLMs进行了微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，这是第一个用于RTL编码的推理LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思考推理轨迹，平均每个56K tokens，从而形成了一个包含3.5B tokens的数据集，其中包含了丰富的RTL知识。在这个语料库上对通用推理模型进行微调，产生了能够进行深度RTL推理的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略进一步提升了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来延长推理过程。实验结果表明，ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上比18个竞争基线高出18.4%，在RTLLM上高出12.7%。", "summary": "本文介绍了ScaleRTL，一个用于RTL代码生成的推理大型语言模型。它通过构建一个包含3.5B tokens的大规模高质量链式思考推理数据集，并结合创新的测试时迭代反思和自我纠正策略，显著提升了RTL代码生成性能。实验证明，ScaleRTL在VerilogEval和RTLLM基准测试上均达到了最先进的水平。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, ScaleRTL", "comments": "该研究通过构建大规模高质量推理数据和引入测试时计算策略，有效解决了RTL代码生成中LLM面临的数据稀疏和推理能力不足的问题，为专业领域代码生成提供了新的思路。其创新点在于结合了数据扩展和推理过程的动态优化，具有重要的实践意义。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina：通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计系统，通过S^2算法、辐射缓存机制和LuminCore加速器，显著提高了3D高斯泼溅在移动设备上的实时神经渲染效率，同时保持了高图像质量。", "motivation": "3D高斯泼溅（3DGS）虽然极大地推动了神经渲染的进步，但在当前的移动SoC上计算需求仍然很高。本文旨在解决3DGS在移动设备上计算量大的挑战。", "method": "本文提出了Lumina，一个软硬件协同设计系统。它包含两项主要优化：1) S^2算法，利用渲染中的时间一致性来减少计算开销；2) 辐射缓存（RC）机制，利用3DGS的颜色积分过程来降低密集光栅化计算的频率。此外，还提出了一个加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的基本低效率问题。", "result": "Lumina在合成和真实世界数据集上，相比移动Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，而图像质量损失极小（峰值信噪比降低小于0.2 dB）。", "conclusion": "Lumina通过其创新的算法和硬件协同设计，成功克服了3D高斯泼溅在移动设备上实时渲染的计算挑战，实现了显著的性能提升和能效改善，同时保持了高质量的视觉效果。", "translation": "3D高斯泼溅（3DGS）极大地推动了神经渲染的进步，但它在当今的移动SoC上仍然计算量巨大。为了应对这一挑战，我们提出了Lumina，一个软硬件协同设计系统，它整合了两项主要优化：一种新颖的S^2算法和一种辐射缓存（RC）机制，以提高神经渲染的效率。S^2算法利用渲染中的时间一致性来减少计算开销，而RC则利用3DGS的颜色积分过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的基本低效率问题。我们展示了Lumina在合成和真实世界数据集上，相比移动Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，同时图像质量损失极小（峰值信噪比降低小于0.2 dB）。", "summary": "Lumina是一个针对移动设备实时神经渲染的软硬件协同设计系统，旨在解决3D高斯泼溅在移动SoC上计算量大的问题。它通过S^2算法利用时间一致性减少计算开销，通过辐射缓存机制降低光栅化频率，并结合LuminCore加速器优化缓存查找和光栅化效率。实验结果表明，Lumina在保持高图像质量的同时，实现了显著的速度和能效提升。", "keywords": "神经渲染, 3D高斯泼溅, 移动计算, 软硬件协同设计, 实时渲染", "comments": "这篇论文的创新点在于提出了一个软硬件协同设计的解决方案，而非仅仅是算法优化。S^2算法和辐射缓存机制有效利用了神经渲染的特性来减少计算冗余，而LuminCore加速器则进一步从硬件层面提升了效率。其在移动设备上实现实时高性能神经渲染的成果具有重要意义，尤其是在AR/VR和移动图形领域有广阔的应用前景。性能提升和能耗降低的数据令人印象深刻，且质量损失微乎其微，显示了其方案的有效性和实用性。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算用于图像识别的预处理方法", "tldr": "本文系统比较了忆阻器储层计算的预处理方法，并提出了一种基于奇偶校验的预处理方法，在图像识别中提高了2-6%的准确性，同时只增加了适度的设备数量。", "motivation": "尽管忆阻器储层计算（RC）因其简化的训练和动态特性而备受关注，但在实现高性能方面仍面临挑战，这主要取决于输入预处理方法和储层大小。目前缺乏对这些因素影响的全面评估。", "method": "本文系统地比较了忆阻器RC系统中的各种预处理方法，评估了它们对准确性和能耗的影响。此外，还提出了一种基于奇偶校验的预处理方法。", "result": "研究发现，所提出的基于奇偶校验的预处理方法能够将准确性提高2-6%，同时与其他方法相比，所需的设备数量仅适度增加。研究结果强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "conclusion": "明智的预处理策略对于提高忆阻器储层计算系统的效率和可扩展性至关重要。", "translation": "储层计算（RC）作为一种高效的循环神经网络架构受到了关注，因为它简化了训练，只需要训练其最后一个感知器读出层。当用忆阻器实现时，RC系统受益于其动态特性，这使得它们非常适合储层构建。然而，在基于忆阻器的RC中实现高性能仍然具有挑战性，因为它关键地取决于输入预处理方法和储层大小。尽管兴趣日益增长，但仍然缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器RC系统中的各种预处理方法，评估了它们对准确性和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，该方法将准确性提高了2-6%，同时与其他方法相比，所需的设备数量仅适度增加。我们的发现强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "summary": "本研究系统地评估了不同预处理方法对忆阻器储层计算（RC）系统在图像识别中性能和能耗的影响。针对忆阻器RC在实现高性能方面的挑战，论文提出了一种基于奇偶校验的预处理方法，该方法在提高准确性（2-6%）的同时，仅适度增加了设备成本。研究强调了优化预处理策略对于提升忆阻器RC系统效率和可扩展性的关键作用。", "keywords": "忆阻器储层计算, 预处理方法, 图像识别, 准确性, 能耗", "comments": "本文的创新点在于系统地比较了忆阻器储层计算的多种预处理方法，并提出了一种有效的基于奇偶校验的新方法。这对于解决忆阻器RC系统在图像识别中实现高性能的挑战具有重要意义，有助于推动该技术在实际应用中的效率和可扩展性。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION：基于内容寻址存储器的资源高效树形集成模型加速", "tldr": "RETENTION是一个端到端框架，通过迭代剪枝算法和创新的树映射方案，显著降低了树形集成模型推理所需的CAM容量，实现了资源高效的加速。", "motivation": "树形集成模型在处理结构化数据方面表现优异，但其固有的特性给传统加速器带来了挑战。尽管内容寻址存储器（CAM）为加速树形模型提供了有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。", "method": "本文提出了RETENTION框架，旨在显著降低树形模型推理所需的CAM容量。该框架包括：1) 一种针对基于bagging模型（如随机森林）的迭代剪枝算法，该算法具有新颖的剪枝准则，可在确保受控精度下降的同时最小化模型复杂性；2) 一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。", "result": "实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升；完整的RETENTION框架可实现4.35倍至207.12倍的改进，且精度损失小于3%。", "conclusion": "RETENTION在降低内容寻址存储器（CAM）容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面表现出卓越的能力，但现代树形集成模型在从结构化数据集中提取相关信息和学习方面仍然表现优异。虽然已经做出了多项努力来加速树形模型，但模型固有的特性给传统加速器带来了重大挑战。最近利用内容寻址存储器（CAM）的研究为加速树形模型提供了一个有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION来解决这些挑战，RETENTION是一个端到端框架，显著降低了树形模型推理所需的CAM容量。我们提出了一种迭代剪枝算法，该算法具有针对基于bagging的模型（例如随机森林）量身定制的新颖剪枝准则，可在确保受控精度下降的同时最小化模型复杂性。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架可实现4.35倍至207.12倍的改进，且精度损失小于3%。这些结果表明，RETENTION在降低CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "summary": "本文提出了RETENTION框架，旨在解决树形集成模型在内容寻址存储器（CAM）加速中存在的内存消耗大和利用率低的问题。该框架通过迭代剪枝算法降低模型复杂性，并采用创新的树映射方案减少CAM内存冗余。实验证明，RETENTION能显著降低CAM容量需求，实现高达207倍的空间效率提升，同时保持较低的精度损失。", "keywords": "树形集成模型, 内容寻址存储器, 模型加速, 剪枝, 内存效率", "comments": "这项工作创新性地结合了模型剪枝和优化的数据放置策略，以解决CAM加速树形模型时面临的关键资源效率挑战。其端到端框架和显著的内存节省效果表明了其在实际硬件部署中的巨大潜力，为资源受限环境下的高效AI推理提供了有价值的解决方案。"}}
