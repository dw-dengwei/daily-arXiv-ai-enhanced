{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL：通过推理数据和测试时计算扩展大型语言模型以实现准确的RTL代码生成", "tldr": "ScaleRTL是一个通过高质量推理数据和测试时计算扩展的推理型大型语言模型，显著提高了RTL代码生成的准确性。", "motivation": "大型语言模型在软件编码基准测试上表现出色，但在RTL代码生成方面的效果有限，主要原因是高质量训练数据稀缺。现有方法未能根本解决数据瓶颈，且缺乏测试时扩展支持。", "method": "本文引入了ScaleRTL，第一个用于RTL编码的推理型大型语言模型。它通过以下方式实现：1. 策划了一个多样化的长链式思维推理轨迹数据集，平均每个56K token，总计3.5B token，捕获了丰富的RTL知识。2. 在此语料库上对通用推理模型进行微调，得到ScaleRTL。3. 通过一种新颖的测试时扩展策略进一步增强性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。", "result": "ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上超越了18个竞争基线高达18.4%，在RTLLM上超越了12.7%。", "conclusion": "ScaleRTL通过结合高质量推理数据和创新的测试时计算策略，显著提升了大型语言模型在RTL代码生成任务上的准确性和性能，克服了数据稀缺和测试时扩展的挑战。", "translation": "大型语言模型（LLMs）的最新进展使得它们在软件编码基准测试中达到了接近人类的性能，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的效率仍然有限。虽然之前的努力已经针对RTL任务对LLMs进行了微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，这是第一个用于RTL编码的推理型LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们策划了一组多样化的长链式思维推理轨迹，平均每个56K token，形成了一个包含3.5B token的数据集，捕获了丰富的RTL知识。在此语料库上对通用推理模型进行微调，产生了能够进行深度RTL推理的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略进一步提升了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。实验结果表明，ScaleRTL在VerilogEval和RTLLM上取得了最先进的性能，在VerilogEval上比18个竞争基线高出18.4%，在RTLLM上高出12.7%。", "summary": "本研究提出了ScaleRTL，一个创新的推理型大型语言模型，旨在解决RTL代码生成中高质量训练数据稀缺的问题。ScaleRTL通过构建一个包含3.5B token的丰富链式思维推理数据集进行微调，并结合一种新颖的测试时自校正推理扩展策略。实验证明，ScaleRTL在VerilogEval和RTLLM基准测试上均达到了最先进的性能，显著优于现有方法，证明了其在RTL代码生成领域的有效性和可扩展性。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, 链式思维", "comments": "ScaleRTL的创新之处在于其双重扩展策略：一方面，通过大规模高质量的链式思维推理数据解决了RTL领域的数据稀缺问题；另一方面，通过测试时的迭代反思和自我纠正机制，增强了模型的推理能力和鲁棒性。这对于提高LLMs在专业领域，特别是代码生成任务中的准确性和可靠性具有重要意义。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina：通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计系统，通过S^2算法、辐射缓存和LuminCore加速器，显著提升了移动设备上3D Gaussian Splatting神经渲染的实时性、能效，且质量损失极小。", "motivation": "3D Gaussian Splatting (3DGS) 在移动SoC上计算需求高，难以实现实时性能。", "method": "提出Lumina系统，包含S^2算法（利用渲染时间连贯性降低计算开销）、辐射缓存机制RC（利用3DGS颜色积分过程减少光栅化频率），并设计LuminCore加速器（加速缓存查找，解决光栅化低效问题）。", "result": "相较于移动Volta GPU，Lumina实现了4.5倍的速度提升和5.3倍的能耗降低，且在合成和真实世界数据集上质量损失极小（峰值信噪比降低<0.2 dB）。", "conclusion": "Lumina通过软硬件协同优化，成功解决了3DGS在移动设备上的计算挑战，显著提升了神经渲染的实时性和能效，同时保持了高质量。", "translation": "3D Gaussian Splatting (3DGS) 极大地推动了神经渲染的进展，但其在当今的移动SoC上仍然计算量巨大。为了解决这一挑战，我们提出了Lumina，一个软硬件协同设计的系统，它集成了两项主要的优化：一种新颖的S^2算法和一种辐射缓存机制RC，以提高神经渲染的效率。S^2算法利用渲染中的时间连贯性来减少计算开销，而RC则利用3DGS的颜色积分过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的根本性低效率问题。我们表明，Lumina在合成和真实世界数据集上，相较于移动Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，且质量损失微乎其微（峰值信噪比降低<0.2 dB）。", "summary": "本文提出了Lumina，一个针对移动设备上3D Gaussian Splatting (3DGS) 神经渲染的软硬件协同设计系统。Lumina通过引入S^2算法利用时间连贯性减少计算开销，以及辐射缓存机制RC降低密集光栅化频率，并结合LuminCore加速器优化缓存查找和光栅化效率。实验结果显示，Lumina在保持极低质量损失的前提下，相较于移动Volta GPU实现了显著的速度和能效提升。", "keywords": "神经渲染, 3D Gaussian Splatting, 移动计算, 软硬件协同设计, 实时渲染", "comments": "这篇论文的创新点在于其软硬件协同设计方法，特别是S^2算法和辐射缓存机制在移动神经渲染中的应用，以及专门设计的LuminCore加速器。它解决了3DGS在移动设备上实时运行的重大挑战，对于推动移动AR/VR等应用具有重要意义。通过利用计算冗余和优化光栅化过程，Lumina展示了在性能和能效方面取得的显著进步。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算在图像识别中的预处理方法", "tldr": "本文系统比较了忆阻器储层计算的预处理方法，并提出了一种新的奇偶校验预处理方法，该方法在图像识别中将准确率提高了2-6%，同时能效更高、可扩展性更强。", "motivation": "忆阻器储层计算（RC）在图像识别中性能受输入预处理方法和储层大小影响，但缺乏对这些因素影响的全面评估。", "method": "系统比较了忆阻器RC系统中各种预处理方法对准确性和能耗的影响，并提出了一种基于奇偶校验的预处理方法。", "result": "提出的奇偶校验预处理方法将准确率提高了2-6%，且仅需适度增加器件数量；研究结果强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "conclusion": "明智的预处理策略对于提高忆阻器储层计算系统的效率和可扩展性至关重要。", "translation": "储层计算（RC）作为一种高效的循环神经网络架构，因其简化的训练（仅需训练其最后一个感知器读出层）而备受关注。当用忆阻器实现时，RC系统受益于其动态特性，这使得它们非常适合储层构建。然而，在基于忆阻器的RC中实现高性能仍然具有挑战性，因为它关键性地取决于输入预处理方法和储层大小。尽管兴趣日益增长，但仍然缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器RC系统的各种预处理方法，评估了它们对准确性和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，与其他方法相比，该方法将准确率提高了2-6%，同时仅需适度增加器件数量。我们的研究结果强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "summary": "本文针对忆阻器储层计算（RC）在图像识别中性能受预处理方法和储层大小影响的挑战，系统地比较了多种预处理方法对准确性和能耗的影响。研究提出了一种新的基于奇偶校验的预处理方法，该方法在仅适度增加器件数量的情况下，将准确率提高了2-6%。研究强调了选择合适的预处理策略对于提升忆阻器RC系统效率和可扩展性的重要性。", "keywords": "忆阻器, 储层计算, 预处理方法, 图像识别, 能耗", "comments": "这篇论文的创新点在于系统地评估了忆阻器储层计算中各种预处理方法的影响，并提出了一种有效的、基于奇偶校验的预处理方法，显著提高了图像识别的准确性，同时兼顾了能耗和器件数量。这对于推动忆阻器在边缘计算和低功耗AI硬件中的应用具有重要意义。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION：基于内容可寻址存储器的资源高效树形集成模型加速", "tldr": "RETENTION显著降低了树形模型加速对内容可寻址存储器（CAM）的内存需求，实现了高效率和极低的精度损失。", "motivation": "现代树形集成模型在处理结构化数据方面表现优异，但其固有特性对传统加速器构成挑战。现有基于内容可寻址存储器（CAM）的加速方案存在内存消耗过大和利用率低的问题，本研究旨在解决这些挑战。", "method": "本文提出了RETENTION，一个端到端框架。该框架包含一个针对基于bagging的模型（如随机森林）量身定制的迭代剪枝算法，旨在最小化模型复杂性并控制精度下降。此外，还引入了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中因广泛使用“无关”状态而导致的内存冗余。", "result": "实验结果显示，单独实施树映射方案可实现1.46倍至21.30倍的空间效率提升。完整的RETENTION框架可将CAM容量需求降低4.35倍至207.12倍，同时精度损失低于3%。", "conclusion": "RETENTION在降低内容可寻址存储器（CAM）容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面表现出卓越的能力，但现代树形集成模型在提取相关信息和从结构化数据集中学习方面仍然更胜一筹。尽管已经为加速树形模型做出了多项努力，但模型的固有特性给传统加速器带来了重大挑战。最近利用内容可寻址存储器（CAM）的研究为加速树形模型提供了一个有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION来解决这些挑战，RETENTION是一个端到端框架，可显著降低树形模型推理的CAM容量需求。我们提出了一种迭代剪枝算法，该算法具有针对基于bagging的模型（例如随机森林）量身定制的新颖剪枝标准，可在确保可控精度下降的同时最小化模型复杂性。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“无关”状态导致的内存冗余。实验结果表明，仅实施树映射方案即可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架则可实现4.35倍至207.12倍的改进，且精度损失低于3%。这些结果表明，RETENTION在降低CAM容量需求方面非常有效，为树形模型加速提供了资源高效的方向。", "summary": "本文介绍了RETENTION，一个旨在通过优化内容可寻址存储器（CAM）使用来加速树形集成模型的框架。它通过迭代剪枝算法减少模型复杂性，并采用创新的树映射方案解决CAM中的内存冗余。实验证明，RETENTION能显著提高空间效率（最高达207.12倍），同时保持极低的精度损失（低于3%），为树形模型加速提供了一种资源高效的解决方案。", "keywords": "树形集成模型, 内容可寻址存储器 (CAM), 模型加速, 剪枝, 内存效率", "comments": "RETENTION的创新之处在于其针对基于bagging的模型提出的迭代剪枝算法以及为CAM设计的独特树映射方案。这项工作的重要性体现在它有效解决了现有CAM加速器在树形模型加速中面临的内存消耗过大和利用率低的关键问题，为资源高效的树形模型加速提供了显著的改进。"}}
