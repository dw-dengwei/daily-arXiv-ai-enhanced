{"id": "2506.05566", "pdf": "https://arxiv.org/pdf/2506.05566", "abs": "https://arxiv.org/abs/2506.05566", "authors": ["Chenhui Deng", "Yun-Da Tsai", "Guan-Ting Liu", "Zhongzhi Yu", "Haoxing Ren"], "title": "ScaleRTL: Scaling LLMs with Reasoning Data and Test-Time Compute for Accurate RTL Code Generation", "categories": ["cs.AR", "cs.AI"], "comment": null, "summary": "Recent advances in large language models (LLMs) have enabled near-human\nperformance on software coding benchmarks, but their effectiveness in RTL code\ngeneration remains limited due to the scarcity of high-quality training data.\nWhile prior efforts have fine-tuned LLMs for RTL tasks, they do not\nfundamentally overcome the data bottleneck and lack support for test-time\nscaling due to their non-reasoning nature. In this work, we introduce ScaleRTL,\nthe first reasoning LLM for RTL coding that scales up both high-quality\nreasoning data and test-time compute. Specifically, we curate a diverse set of\nlong chain-of-thought reasoning traces averaging 56K tokens each, resulting in\na dataset of 3.5B tokens that captures rich RTL knowledge. Fine-tuning a\ngeneral-purpose reasoning model on this corpus yields ScaleRTL that is capable\nof deep RTL reasoning. Subsequently, we further enhance the performance of\nScaleRTL through a novel test-time scaling strategy that extends the reasoning\nprocess via iteratively reflecting on and self-correcting previous reasoning\nsteps. Experimental results show that ScaleRTL achieves state-of-the-art\nperformance on VerilogEval and RTLLM, outperforming 18 competitive baselines by\nup to 18.4% on VerilogEval and 12.7% on RTLLM.", "AI": {"title_translation": "ScaleRTL：使用推理数据和测试时计算扩展LLM以实现准确的RTL代码生成", "tldr": "ScaleRTL是一个利用大量推理数据和测试时计算的RTL代码生成LLM，显著提升了RTL编码性能。", "motivation": "尽管大型语言模型（LLMs）在软件编码基准测试中表现接近人类水平，但由于高质量训练数据稀缺，它们在RTL代码生成方面的效果有限。以往的方法未能从根本上克服数据瓶颈，且缺乏对测试时扩展的支持，因为它们不具备推理能力。", "method": "本文引入了ScaleRTL，这是第一个用于RTL编码的推理型LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一个多样化的长链式思考推理轨迹数据集，平均每个56K tokens，总计3.5B tokens，捕获了丰富的RTL知识。通过在此语料库上微调一个通用推理模型，得到了具备深度RTL推理能力的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略进一步提升了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。", "result": "实验结果表明，ScaleRTL在VerilogEval和RTLLM上均实现了最先进的性能，在VerilogEval上比18个竞争基线高出18.4%，在RTLLM上高出12.7%。", "conclusion": "ScaleRTL通过结合大规模推理数据和创新的测试时计算策略，显著提升了LLMs在RTL代码生成任务上的准确性和性能，克服了现有方法的局限性。", "translation": "大型语言模型（LLMs）在软件编码基准测试中取得了接近人类水平的最新进展，但由于高质量训练数据的稀缺性，它们在RTL代码生成方面的有效性仍然有限。尽管之前的努力已经针对RTL任务对LLMs进行了微调，但它们并未从根本上克服数据瓶颈，并且由于其非推理性质，缺乏对测试时扩展的支持。在这项工作中，我们引入了ScaleRTL，这是第一个用于RTL编码的推理型LLM，它同时扩展了高质量推理数据和测试时计算。具体来说，我们整理了一组多样化的长链式思考推理轨迹，平均每个56K tokens，形成了一个3.5B tokens的数据集，捕获了丰富的RTL知识。在此语料库上对通用推理模型进行微调，产生了具备深度RTL推理能力的ScaleRTL。随后，我们通过一种新颖的测试时扩展策略进一步增强了ScaleRTL的性能，该策略通过迭代反思和自我纠正先前的推理步骤来扩展推理过程。实验结果表明，ScaleRTL在VerilogEval和RTLLM上均实现了最先进的性能，在VerilogEval上比18个竞争基线高出18.4%，在RTLLM上高出12.7%。", "summary": "本文介绍了ScaleRTL，一个针对RTL代码生成任务设计的推理型大型语言模型。该模型通过构建一个包含3.5B tokens的丰富链式思考推理数据集来克服高质量训练数据稀缺的问题，并在此基础上对通用推理模型进行微调。此外，ScaleRTL还引入了一种新颖的测试时扩展策略，通过迭代反思和自我纠正来增强推理过程。实验结果表明，ScaleRTL在VerilogEval和RTLLM基准测试中均达到了最先进的性能，显著优于现有方法，证明了其在RTL代码生成领域的有效性。", "keywords": "RTL代码生成, 大型语言模型, 推理数据, 测试时计算, ScaleRTL", "comments": "ScaleRTL的创新之处在于它是首个将推理能力引入RTL编码领域的LLM，并通过大规模推理数据和独特的测试时计算策略解决了现有模型在数据稀缺和测试时扩展方面的局限。这显著提升了LLM在RTL代码生成任务上的准确性和实用性，对硬件设计自动化具有重要意义。"}}
{"id": "2506.05682", "pdf": "https://arxiv.org/pdf/2506.05682", "abs": "https://arxiv.org/abs/2506.05682", "authors": ["Yu Feng", "Weikai Lin", "Yuge Cheng", "Zihan Liu", "Jingwen Leng", "Minyi Guo", "Chen Chen", "Shixuan Sun", "Yuhao Zhu"], "title": "Lumina: Real-Time Mobile Neural Rendering by Exploiting Computational Redundancy", "categories": ["cs.AR"], "comment": null, "summary": "3D Gaussian Splatting (3DGS) has vastly advanced the pace of neural\nrendering, but it remains computationally demanding on today's mobile SoCs. To\naddress this challenge, we propose Lumina, a hardware-algorithm co-designed\nsystem, which integrates two principal optimizations: a novel algorithm, S^2,\nand a radiance caching mechanism, RC, to improve the efficiency of neural\nrendering. S2 algorithm exploits temporal coherence in rendering to reduce the\ncomputational overhead, while RC leverages the color integration process of\n3DGS to decrease the frequency of intensive rasterization computations. Coupled\nwith these techniques, we propose an accelerator architecture, LuminCore, to\nfurther accelerate cache lookup and address the fundamental inefficiencies in\nRasterization. We show that Lumina achieves 4.5x speedup and 5.3x energy\nreduction against a mobile Volta GPU, with a marginal quality loss (< 0.2 dB\npeak signal-to-noise ratio reduction) across synthetic and real-world datasets.", "AI": {"title_translation": "Lumina: 通过利用计算冗余实现实时移动神经渲染", "tldr": "Lumina是一个软硬件协同设计的系统，通过S^2算法和辐射缓存机制，以及LuminCore加速器，显著提升了移动设备上3D Gaussian Splatting神经渲染的效率和能耗。", "motivation": "3D Gaussian Splatting (3DGS) 在移动SoC上计算开销大，需要解决其计算密集型问题以实现实时移动神经渲染。", "method": "提出了Lumina，一个软硬件协同设计的系统。该系统包含：1) S^2算法，利用渲染中的时间相干性减少计算开销；2) 辐射缓存（RC）机制，利用3DGS的颜色集成过程减少密集光栅化计算的频率；3) LuminCore加速器架构，进一步加速缓存查找并解决光栅化中的根本低效率问题。", "result": "Lumina 在合成和真实世界数据集上，相对于移动Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，同时图像质量损失很小（峰值信噪比降低<0.2 dB）。", "conclusion": "通过软硬件协同设计，Lumina成功解决了移动设备上3DGS神经渲染的计算密集型问题，实现了显著的性能和能效提升，同时保持了高质量的渲染效果。", "translation": "3D Gaussian Splatting (3DGS) 大幅推进了神经渲染的步伐，但它在当今的移动SoC上仍然计算量巨大。为了应对这一挑战，我们提出了Lumina，一个软硬件协同设计的系统，它集成了两项主要优化：一种新颖的S^2算法和一种辐射缓存（RC）机制，以提高神经渲染的效率。S^2算法利用渲染中的时间相干性来减少计算开销，而RC则利用3DGS的颜色集成过程来降低密集光栅化计算的频率。结合这些技术，我们提出了一种加速器架构LuminCore，以进一步加速缓存查找并解决光栅化中的根本低效率问题。我们表明，Lumina在合成和真实世界数据集上，相对于移动Volta GPU，实现了4.5倍的速度提升和5.3倍的能耗降低，同时图像质量损失很小（峰值信噪比降低<0.2 dB）。", "summary": "本文提出了Lumina，一个针对移动设备神经渲染的软硬件协同设计系统，旨在解决3D Gaussian Splatting (3DGS) 在移动SoC上计算量大的问题。Lumina集成了S^2算法和辐射缓存（RC）机制以提高效率，并通过LuminCore加速器架构进一步优化性能。实验结果显示，Lumina在保持极低质量损失的前提下，实现了显著的速度提升和能耗降低。", "keywords": "神经渲染, 3D Gaussian Splatting, 移动设备, 软硬件协同设计, 计算冗余", "comments": "这篇论文通过软硬件协同设计的方法，有效地解决了3DGS在移动设备上的性能瓶颈，其创新点在于结合了算法优化（S^2和RC）与定制硬件加速器（LuminCore），为移动神经渲染的普及提供了重要支撑。"}}
{"id": "2506.05588", "pdf": "https://arxiv.org/pdf/2506.05588", "abs": "https://arxiv.org/abs/2506.05588", "authors": ["Rishona Daniels", "Duna Wattad", "Ronny Ronen", "David Saad", "Shahar Kvatinsky"], "title": "Preprocessing Methods for Memristive Reservoir Computing for Image Recognition", "categories": ["cs.NE", "cs.AR", "cs.ET"], "comment": "6 pages, 8 figures, submitted for review in IEEE MetroXRAINE 2025\n  conference", "summary": "Reservoir computing (RC) has attracted attention as an efficient recurrent\nneural network architecture due to its simplified training, requiring only its\nlast perceptron readout layer to be trained. When implemented with memristors,\nRC systems benefit from their dynamic properties, which make them ideal for\nreservoir construction. However, achieving high performance in memristor-based\nRC remains challenging, as it critically depends on the input preprocessing\nmethod and reservoir size. Despite growing interest, a comprehensive evaluation\nthat quantifies the impact of these factors is still lacking. This paper\nsystematically compares various preprocessing methods for memristive RC\nsystems, assessing their effects on accuracy and energy consumption. We also\npropose a parity-based preprocessing method that improves accuracy by 2-6%\nwhile requiring only a modest increase in device count compared to other\nmethods. Our findings highlight the importance of informed preprocessing\nstrategies to improve the efficiency and scalability of memristive RC systems.", "AI": {"title_translation": "忆阻器储层计算用于图像识别的预处理方法", "tldr": "本文系统比较了忆阻器储层计算的预处理方法，并提出了一种新的基于奇偶校验的预处理方法，提高了图像识别精度。", "motivation": "忆阻器储层计算（RC）在图像识别中实现高性能面临挑战，其性能严重依赖于输入预处理方法和储层大小，但目前缺乏对这些因素影响的全面评估。", "method": "本文系统地比较了忆阻器储层计算系统的各种预处理方法，评估它们对精度和能耗的影响。此外，还提出了一种新的基于奇偶校验的预处理方法。", "result": "研究提出了一种基于奇偶校验的预处理方法，该方法可将精度提高2-6%，且与现有方法相比，仅需适度增加器件数量。研究结果强调了明智的预处理策略对于提高忆阻器储层计算系统效率和可扩展性的重要性。", "conclusion": "明智的预处理策略对于提高忆阻器储层计算系统的效率和可扩展性至关重要。", "translation": "储层计算（RC）作为一种高效的循环神经网络架构，因其简化的训练（只需训练其最后一个感知器读出层）而备受关注。当使用忆阻器实现时，RC系统受益于其动态特性，这使其成为储层构建的理想选择。然而，在基于忆阻器的RC中实现高性能仍然具有挑战性，因为它关键性地取决于输入预处理方法和储层大小。尽管兴趣日益增长，但仍缺乏量化这些因素影响的全面评估。本文系统地比较了忆阻器RC系统的各种预处理方法，评估它们对精度和能耗的影响。我们还提出了一种基于奇偶校验的预处理方法，该方法可将精度提高2-6%，同时与现有方法相比，仅需适度增加器件数量。我们的研究结果强调了明智的预处理策略对于提高忆阻器RC系统效率和可扩展性的重要性。", "summary": "本文系统地比较了忆阻器储层计算（RC）在图像识别中的各种预处理方法，评估其对精度和能耗的影响。研究提出了一种新的基于奇偶校验的预处理方法，该方法在仅适度增加器件数量的情况下，将精度提高了2-6%。研究强调了预处理策略对提高忆阻器RC系统效率和可扩展性的关键作用。", "keywords": "忆阻器储层计算, 预处理方法, 图像识别, 精度, 能耗", "comments": "论文通过系统比较和提出新方法，解决了忆阻器储层计算在图像识别中性能受预处理方法限制的问题，为提高忆阻器RC系统的效率和可扩展性提供了重要指导。"}}
{"id": "2506.05994", "pdf": "https://arxiv.org/pdf/2506.05994", "abs": "https://arxiv.org/abs/2506.05994", "authors": ["Yi-Chun Liao", "Chieh-Lin Tsai", "Yuan-Hao Chang", "Camélia Slimani", "Jalil Boukhobza", "Tei-Wei Kuo"], "title": "RETENTION: Resource-Efficient Tree-Based Ensemble Model Acceleration with Content-Addressable Memory", "categories": ["cs.LG", "cs.AR", "cs.ET"], "comment": null, "summary": "Although deep learning has demonstrated remarkable capabilities in learning\nfrom unstructured data, modern tree-based ensemble models remain superior in\nextracting relevant information and learning from structured datasets. While\nseveral efforts have been made to accelerate tree-based models, the inherent\ncharacteristics of the models pose significant challenges for conventional\naccelerators. Recent research leveraging content-addressable memory (CAM)\noffers a promising solution for accelerating tree-based models, yet existing\ndesigns suffer from excessive memory consumption and low utilization. This work\naddresses these challenges by introducing RETENTION, an end-to-end framework\nthat significantly reduces CAM capacity requirement for tree-based model\ninference. We propose an iterative pruning algorithm with a novel pruning\ncriterion tailored for bagging-based models (e.g., Random Forest), which\nminimizes model complexity while ensuring controlled accuracy degradation.\nAdditionally, we present a tree mapping scheme that incorporates two innovative\ndata placement strategies to alleviate the memory redundancy caused by the\nwidespread use of don't care states in CAM. Experimental results show that\nimplementing the tree mapping scheme alone achieves $1.46\\times$ to $21.30\n\\times$ better space efficiency, while the full RETENTION framework yields\n$4.35\\times$ to $207.12\\times$ improvement with less than 3% accuracy loss.\nThese results demonstrate that RETENTION is highly effective in reducing CAM\ncapacity requirement, providing a resource-efficient direction for tree-based\nmodel acceleration.", "AI": {"title_translation": "RETENTION: 基于内容可寻址存储器的资源高效树形集成模型加速", "tldr": "RETENTION是一个框架，通过迭代剪枝和树映射方案显著减少了基于CAM的树形模型加速的内存需求，且精度损失很小。", "motivation": "尽管深度学习在非结构化数据方面表现出色，但树形集成模型在结构化数据上仍有优势。现有加速树形模型的方法面临挑战，尤其是利用内容可寻址存储器（CAM）的方案存在内存消耗过大和利用率低的问题。", "method": "提出了RETENTION框架，包含：1. 迭代剪枝算法：采用新的剪枝准则，专门针对基于Bagging的模型（如随机森林），在控制精度下降的同时最小化模型复杂度。2. 树映射方案：包含两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。", "result": "单独实施树映射方案可实现1.46倍至21.30倍的空间效率提升；完整的RETENTION框架在精度损失小于3%的情况下，实现了4.35倍至207.12倍的改进。", "conclusion": "RETENTION在减少CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "translation": "尽管深度学习在从非结构化数据中学习方面表现出卓越的能力，但现代树形集成模型在提取相关信息和从结构化数据集中学习方面仍然更胜一筹。虽然已经为加速树形模型做出了多项努力，但模型的固有特性给传统加速器带来了重大挑战。最近利用内容可寻址存储器（CAM）的研究为加速树形模型提供了一个有前景的解决方案，但现有设计存在内存消耗过大和利用率低的问题。这项工作通过引入RETENTION来应对这些挑战，RETENTION是一个端到端框架，显著降低了树形模型推理的CAM容量需求。我们提出了一种迭代剪枝算法，该算法采用了一种新颖的剪枝准则，专为基于Bagging的模型（例如随机森林）量身定制，可在确保受控精度下降的同时最小化模型复杂度。此外，我们提出了一种树映射方案，该方案结合了两种创新的数据放置策略，以减轻CAM中广泛使用“不关心”状态导致的内存冗余。实验结果表明，单独实施树映射方案可实现1.46倍至21.30倍的空间效率提升，而完整的RETENTION框架则在精度损失小于3%的情况下实现了4.35倍至207.12倍的改进。这些结果表明，RETENTION在减少CAM容量需求方面非常有效，为树形模型加速提供了一个资源高效的方向。", "summary": "本研究介绍了RETENTION，一个旨在通过优化内容可寻址存储器（CAM）使用来加速树形集成模型推理的端到端框架。针对现有CAM加速方案内存消耗和利用率低的问题，RETENTION提出了一种迭代剪枝算法来降低模型复杂度，并设计了一种创新的树映射方案以减少内存冗余。实验证明，RETENTION框架能显著提高空间效率，并在保持较低精度损失的同时大幅减少CAM容量需求。", "keywords": "树形集成模型, 内容可寻址存储器 (CAM), 模型加速, 资源高效, 剪枝, 内存优化", "comments": "这项工作通过提出RETENTION框架，解决了基于CAM的树形模型加速中内存效率低下的关键问题。其创新点在于结合了专门针对Bagging模型的迭代剪枝算法和优化的树映射策略，显著提高了CAM的空间效率，为资源受限环境下的树形模型部署提供了有价值的方向。"}}
