{"id": "2506.06333", "title": "Extending AALpy with Passive Learning: A Generalized State-Merging Approach", "authors": ["Benjamin von Berg", "Bernhard K. Aichernig"], "summary": "AALpy is a well-established open-source automata learning library written in\nPython with a focus on active learning of systems with IO behavior. It provides\na wide range of state-of-the-art algorithms for different automaton types\nranging from fully deterministic to probabilistic automata. In this work, we\npresent the recent addition of a generalized implementation of an important\nmethod from the domain of passive automata learning: state-merging in the\nred-blue framework. Using a common internal representation for different\nautomaton types allows for a general and highly configurable implementation of\nthe red-blue framework. We describe how to define and execute state-merging\nalgorithms using AALpy, which reduces the implementation effort for\nstate-merging algorithms mainly to the definition of compatibility criteria and\nscoring. This aids the implementation of both existing and novel algorithms. In\nparticular, defining some existing state-merging algorithms from the literature\nwith AALpy only takes a few lines of code.", "comment": "Accepted for publication at CAV 2025, the 37th International\n  Conference on Computer Aided Verification", "cate": "cs.LG", "url": "http://arxiv.org/pdf/2506.06333v1", "AI": {"title_translation": "使用被动学习扩展 AALpy：一种广义状态合并方法", "tldr": "AALpy 库通过广义状态合并方法扩展了被动学习功能，简化了状态合并算法的实现。", "motivation": "扩展 AALpy 库，使其包含被动自动机学习领域中的重要方法：red-blue 框架中的状态合并。", "method": "在 AALpy 中实现 red-blue 框架中的广义状态合并方法，使用通用内部表示来实现不同自动机类型的状态合并算法。", "result": "展示了如何使用 AALpy 定义和执行状态合并算法，从而减少了状态合并算法的实现工作量，特别是兼容性标准和评分的定义。使用 AALpy 定义一些现有的状态合并算法只需几行代码。", "conclusion": "通过在 AALpy 中实现广义状态合并方法，简化了现有和新型算法的实现。", "translation": "AALpy 是一个成熟的开源自动机学习库，用 Python 编写，专注于具有 IO 行为的系统的主动学习。它为不同的自动机类型提供了广泛的最新算法，范围从完全确定性自动机到概率自动机。在这项工作中，我们介绍了最近添加的被动自动机学习领域中一种重要方法的广义实现：red-blue 框架中的状态合并。使用不同自动机类型的通用内部表示允许 red-blue 框架的通用且高度可配置的实现。我们描述了如何使用 AALpy 定义和执行状态合并算法，这主要将状态合并算法的实现工作量减少到兼容性标准和评分的定义。这有助于实现现有和新型算法。特别是，使用 AALpy 定义文献中的一些现有状态合并算法只需几行代码。", "summary": "本文介绍了 AALpy 库中新增的广义状态合并方法，该方法基于 red-blue 框架，用于被动自动机学习。通过使用通用内部表示，实现了不同自动机类型的状态合并算法的通用和高度可配置的实现。结果表明，使用 AALpy 可以显著减少状态合并算法的实现工作量。", "keywords": "自动机学习, 被动学习, 状态合并, AALpy, red-blue 框架", "comments": "该论文通过在 AALpy 库中引入通用的状态合并框架，显著提升了其在被动学习领域的应用能力，降低了算法实现的复杂度，具有一定的创新性和实用价值。"}}
{"id": "2506.06551", "title": "Elementary Cellular Automata as Non-Cryptographic Hash Functions", "authors": ["Daniel McKinley"], "summary": "A subset of 10 of the 256 elementary cellular automata (ECA) are implemented\nas a hash function using an error minimization lossy compression algorithm\noperating on wrapped 4x4 neighborhood cells. All 256 rules are processed and 10\nrules in two subsets of 8 are found to have properties that include both error\nminimization and maximization, unique solutions, a lossy inverse, efficient\nretroactive hashing, and an application to edge detection. The algorithm\nparallels the nested powers-of-two structure of the Fast Fourier Transform and\nFast Walsh-Hadamard Transform, is implemented in Java, and is built to hash any\n2 byte RGB code bitmap.", "comment": null, "cate": "nlin.CG", "url": "http://arxiv.org/pdf/2506.06551v1", "AI": {"title_translation": "元胞自动机作为非密码散列函数", "tldr": "使用元胞自动机作为散列函数，通过误差最小化有损压缩算法在包裹的4x4邻域单元上实现。", "motivation": "探索元胞自动机在非密码散列函数中的应用。", "method": "使用误差最小化有损压缩算法在包裹的4x4邻域单元上实现元胞自动机作为散列函数。", "result": "在256个规则中，发现两个8个规则的子集具有误差最小化和最大化、唯一解、有损逆、高效追溯散列以及边缘检测的应用等特性。", "conclusion": "实现了基于元胞自动机的散列函数，并发现了一些有用的规则子集。", "translation": "摘要：实现了256个基本元胞自动机（ECA）中的一个子集（10个），作为一个哈希函数，使用误差最小化有损压缩算法，该算法作用于包裹的4x4邻域单元。处理了所有256个规则，发现两个8个规则的子集具有误差最小化和最大化、唯一解、有损逆、高效追溯哈希以及边缘检测的应用等特性。该算法与快速傅里叶变换和快速沃尔什-哈达玛变换的嵌套二次幂结构相似，用Java实现，并且构建用于哈希任何2字节RGB代码位图。", "summary": "本文提出了一种使用基本元胞自动机作为非密码散列函数的方法。通过误差最小化有损压缩算法在4x4邻域单元上实现，并发现了一些具有良好特性的规则子集，适用于边缘检测等应用。", "keywords": "元胞自动机, 散列函数, 误差最小化, 有损压缩, 边缘检测", "comments": "该论文提出了一种新颖的散列函数实现方法，将元胞自动机应用于非密码散列，并发现了一些有意思的特性。但是，其实际的安全性和性能还需要进一步评估。"}}
{"id": "2506.07956", "title": "Language Models over Canonical Byte-Pair Encodings", "authors": ["Tim Vieira", "Tianyu Liu", "Clemente Pasti", "Yahya Emara", "Brian DuSell", "Benjamin LeBrun", "Mario Giulianelli", "Juan Luis Gastaldi", "Timothy J. O'Donnell", "Ryan Cotterell"], "summary": "Modern language models represent probability distributions over character\nstrings as distributions over (shorter) token strings derived via a\ndeterministic tokenizer, such as byte-pair encoding. While this approach is\nhighly effective at scaling up language models to large corpora, its current\nincarnations have a concerning property: the model assigns nonzero probability\nmass to an exponential number of $\\it{noncanonical}$ token encodings of each\ncharacter string -- these are token strings that decode to valid character\nstrings but are impossible under the deterministic tokenizer (i.e., they will\nnever be seen in any training corpus, no matter how large). This misallocation\nis both erroneous, as noncanonical strings never appear in training data, and\nwasteful, diverting probability mass away from plausible outputs. These are\navoidable mistakes! In this work, we propose methods to enforce canonicality in\ntoken-level language models, ensuring that only canonical token strings are\nassigned positive probability. We present two approaches: (1) canonicality by\nconditioning, leveraging test-time inference strategies without additional\ntraining, and (2) canonicality by construction, a model parameterization that\nguarantees canonical outputs but requires training. We demonstrate that fixing\ncanonicality mistakes improves the likelihood of held-out data for several\nmodels and corpora.", "comment": "ICML 2025", "cate": "cs.CL", "url": "http://arxiv.org/pdf/2506.07956v1", "AI": {"title_translation": "基于规范字节对编码的语言模型", "tldr": "语言模型会给不可能出现的token序列赋予非零概率，这很浪费。本文提出了两种方法来解决这个问题，并在实验中证明了其有效性。", "motivation": "目前的语言模型会给每个字符序列的非规范token编码赋予非零概率，这既是错误的，也是浪费的，因为这些非规范字符串永远不会出现在训练数据中。", "method": "本文提出了两种强制token级别语言模型规范性的方法：(1) 通过条件反射实现规范性，利用测试时推理策略，无需额外训练；(2) 通过构建实现规范性，这是一种保证规范输出的模型参数化，但需要训练。", "result": "实验表明，修正规范性错误可以提高几个模型和语料库的held-out数据的可能性。", "conclusion": "本文提出了两种方法来强制token级别语言模型的规范性，实验表明修正规范性错误可以提高held-out数据的可能性。", "translation": "现代语言模型将字符字符串上的概率分布表示为通过确定性分词器（如字节对编码）导出的（较短）token字符串上的分布。虽然这种方法在将语言模型扩展到大型语料库方面非常有效，但其目前的实现方式存在一个令人担忧的属性：该模型为每个字符字符串的指数数量的非规范token编码分配非零概率质量——这些token字符串解码为有效的字符字符串，但在确定性分词器下是不可能的（即，无论训练语料库有多大，它们都不会出现在任何训练语料库中）。这种错误分配既是错误的（因为非规范字符串永远不会出现在训练数据中），也是浪费的，将概率质量从合理的输出中转移出去。这些都是可以避免的错误！在这项工作中，我们提出了在token级别语言模型中强制规范性的方法，确保只有规范token字符串被分配正概率。我们提出了两种方法：（1）通过条件反射实现规范性，利用测试时推理策略，无需额外训练；（2）通过构建实现规范性，这是一种保证规范输出的模型参数化，但需要训练。我们证明，修正规范性错误可以提高几个模型和语料库的held-out数据的可能性。", "summary": "本文提出了一种解决语言模型中非规范token编码问题的方法。该方法通过条件反射和构建两种方式，强制token级别语言模型的规范性，确保只有规范token字符串被分配正概率。实验证明，该方法可以提高模型的性能。", "keywords": "语言模型, 字节对编码, 规范性", "comments": "本文创新性地提出了两种方法来解决语言模型中非规范token编码的问题，并进行了实验验证，具有一定的理论意义和实际应用价值。"}}
