{"id": "2506.06333", "title": "Extending AALpy with Passive Learning: A Generalized State-Merging Approach", "authors": ["Benjamin von Berg", "Bernhard K. Aichernig"], "summary": "AALpy is a well-established open-source automata learning library written in\nPython with a focus on active learning of systems with IO behavior. It provides\na wide range of state-of-the-art algorithms for different automaton types\nranging from fully deterministic to probabilistic automata. In this work, we\npresent the recent addition of a generalized implementation of an important\nmethod from the domain of passive automata learning: state-merging in the\nred-blue framework. Using a common internal representation for different\nautomaton types allows for a general and highly configurable implementation of\nthe red-blue framework. We describe how to define and execute state-merging\nalgorithms using AALpy, which reduces the implementation effort for\nstate-merging algorithms mainly to the definition of compatibility criteria and\nscoring. This aids the implementation of both existing and novel algorithms. In\nparticular, defining some existing state-merging algorithms from the literature\nwith AALpy only takes a few lines of code.", "comment": "Accepted for publication at CAV 2025, the 37th International\n  Conference on Computer Aided Verification", "cate": "cs.LG", "url": "http://arxiv.org/pdf/2506.06333v1", "AI": {"title_translation": "使用被动学习扩展AALpy：一种广义状态合并方法", "tldr": "AALpy库通过实现red-blue框架中的状态合并方法，扩展了其被动自动机学习能力，简化了状态合并算法的定义和执行。", "motivation": "AALpy是一个专注于具有IO行为的系统的主动学习的开源自动机学习库。本文旨在通过添加被动自动机学习领域中的状态合并方法来扩展AALpy的功能。", "method": "在red-blue框架中实现状态合并，使用通用内部表示来实现不同自动机类型的通用和高度可配置的实现。", "result": "展示了如何使用AALpy定义和执行状态合并算法，显著减少了状态合并算法的实现工作量，特别是对于现有算法，只需几行代码即可实现。", "conclusion": "通过在AALpy中实现通用的状态合并框架，简化了被动自动机学习算法的开发和实验过程。", "translation": "AALpy是一个完善的开源自动机学习库，用Python编写，专注于具有IO行为的系统的主动学习。它为不同的自动机类型提供了广泛的先进算法，范围从完全确定性自动机到概率自动机。在这项工作中，我们介绍了最近添加的被动自动机学习领域中一种重要方法的广义实现：red-blue框架中的状态合并。使用不同自动机类型的通用内部表示允许red-blue框架的通用和高度可配置的实现。我们描述了如何使用AALpy定义和执行状态合并算法，这减少了状态合并算法的实现工作量，主要减少到兼容性标准和评分的定义。这有助于现有算法和新算法的实现。特别是，使用AALpy定义文献中的一些现有状态合并算法只需几行代码。", "summary": "本文介绍了AALpy库的扩展，通过在red-blue框架中实现通用的状态合并方法，增强了其被动自动机学习能力。该实现简化了状态合并算法的定义和执行，并展示了使用AALpy实现现有算法的简易性。", "keywords": "自动机学习, 被动学习, 状态合并, AALpy", "comments": "该论文通过扩展AALpy库的功能，为自动机学习领域的研究人员提供了更强大的工具。通用状态合并框架的实现降低了算法开发的门槛，促进了新算法的探索。"}}
{"id": "2506.06551", "title": "Elementary Cellular Automata as Non-Cryptographic Hash Functions", "authors": ["Daniel McKinley"], "summary": "A subset of 10 of the 256 elementary cellular automata (ECA) are implemented\nas a hash function using an error minimization lossy compression algorithm\noperating on wrapped 4x4 neighborhood cells. All 256 rules are processed and 10\nrules in two subsets of 8 are found to have properties that include both error\nminimization and maximization, unique solutions, a lossy inverse, efficient\nretroactive hashing, and an application to edge detection. The algorithm\nparallels the nested powers-of-two structure of the Fast Fourier Transform and\nFast Walsh-Hadamard Transform, is implemented in Java, and is built to hash any\n2 byte RGB code bitmap.", "comment": null, "cate": "nlin.CG", "url": "http://arxiv.org/pdf/2506.06551v1", "AI": {"title_translation": "初等细胞自动机作为非密码散列函数", "tldr": "使用初等细胞自动机实现了一种非密码散列函数，该函数基于误差最小化有损压缩算法，并在包裹的 4x4 邻域单元上运行。", "motivation": "探索初等细胞自动机作为散列函数的潜力。", "method": "使用误差最小化有损压缩算法在包裹的 4x4 邻域单元上实现 10 个初等细胞自动机作为散列函数。该算法类似于快速傅里叶变换和快速 Walsh-Hadamard 变换的嵌套二次幂结构，用 Java 实现，旨在散列任何 2 字节 RGB 代码位图。", "result": "发现 256 个规则中的 10 个规则（分为两个 8 个规则的子集）具有误差最小化和最大化、唯一解、有损逆、高效追溯散列以及边缘检测应用等属性。", "conclusion": "已实现的基于初等细胞自动机的散列函数具有有希望的特性，包括误差最小化、唯一解和高效的追溯散列。", "translation": "摘要：实现了 256 个基本细胞自动机 (ECA) 中的 10 个子集，作为哈希函数，该函数使用在包裹的 4x4 邻域单元上运行的误差最小化有损压缩算法。处理所有 256 条规则，发现 8 条规则的两个子集中的 10 条规则具有以下属性：误差最小化和最大化、唯一解、有损逆、高效追溯哈希以及边缘检测应用。该算法类似于快速傅里叶变换和快速 Walsh-Hadamard 变换的嵌套二次幂结构，用 Java 实现，旨在哈希任何 2 字节 RGB 代码位图。", "summary": "本文提出了一种使用初等细胞自动机作为非密码散列函数的实现方法。该方法基于误差最小化有损压缩算法，在包裹的 4x4 邻域单元上运行。研究发现，部分细胞自动机规则具有误差最小化、唯一解、有损逆、高效追溯散列以及边缘检测应用等特性。该算法用 Java 实现，适用于散列 2 字节 RGB 代码位图。", "keywords": "细胞自动机, 散列函数, 误差最小化, 有损压缩, 边缘检测", "comments": "该论文提出了一种新颖的散列函数实现方法，利用了初等细胞自动机的特性。该方法具有一定的创新性，但其安全性和性能还需要进一步评估。"}}
{"id": "2506.07956", "title": "Language Models over Canonical Byte-Pair Encodings", "authors": ["Tim Vieira", "Tianyu Liu", "Clemente Pasti", "Yahya Emara", "Brian DuSell", "Benjamin LeBrun", "Mario Giulianelli", "Juan Luis Gastaldi", "Timothy J. O'Donnell", "Ryan Cotterell"], "summary": "Modern language models represent probability distributions over character\nstrings as distributions over (shorter) token strings derived via a\ndeterministic tokenizer, such as byte-pair encoding. While this approach is\nhighly effective at scaling up language models to large corpora, its current\nincarnations have a concerning property: the model assigns nonzero probability\nmass to an exponential number of $\\it{noncanonical}$ token encodings of each\ncharacter string -- these are token strings that decode to valid character\nstrings but are impossible under the deterministic tokenizer (i.e., they will\nnever be seen in any training corpus, no matter how large). This misallocation\nis both erroneous, as noncanonical strings never appear in training data, and\nwasteful, diverting probability mass away from plausible outputs. These are\navoidable mistakes! In this work, we propose methods to enforce canonicality in\ntoken-level language models, ensuring that only canonical token strings are\nassigned positive probability. We present two approaches: (1) canonicality by\nconditioning, leveraging test-time inference strategies without additional\ntraining, and (2) canonicality by construction, a model parameterization that\nguarantees canonical outputs but requires training. We demonstrate that fixing\ncanonicality mistakes improves the likelihood of held-out data for several\nmodels and corpora.", "comment": "ICML 2025", "cate": "cs.CL", "url": "http://arxiv.org/pdf/2506.07956v1", "AI": {"title_translation": "基于规范字节对编码的语言模型", "tldr": "语言模型会给非规范的token序列分配概率，这很浪费。本文提出了两种方法来强制执行规范性，提高了模型的性能。", "motivation": "现有的语言模型会将非零概率分配给大量非规范的token编码，这导致概率分配错误和浪费。", "method": "提出了两种方法来强制执行token级别语言模型的规范性：(1) 通过条件反射实现规范性，利用测试时推理策略，无需额外训练；(2) 通过构建实现规范性，这是一种保证规范输出的模型参数化，但需要训练。", "result": "通过修复规范性错误，提高了几个模型和语料库的held-out数据的可能性。", "conclusion": "本文提出的方法可以有效地提高语言模型的性能，避免概率分配错误和浪费。", "translation": "现代语言模型将字符字符串上的概率分布表示为通过确定性分词器（例如字节对编码）导出的（较短）token字符串上的分布。虽然这种方法在将语言模型扩展到大型语料库方面非常有效，但其目前的实现方式存在一个令人担忧的属性：该模型为每个字符字符串的指数数量的非规范token编码分配非零概率质量——这些token字符串解码为有效的字符字符串，但在确定性分词器下是不可能的（即，无论训练语料库有多大，它们都不会在任何训练语料库中出现）。这种错误分配既是错误的，因为非规范字符串永远不会出现在训练数据中，也是浪费的，将概率质量从合理的输出中转移出去。这些都是可以避免的错误！在这项工作中，我们提出了在token级别语言模型中强制执行规范性的方法，确保只有规范token字符串被分配正概率。我们提出了两种方法：（1）通过条件反射实现规范性，利用测试时推理策略，无需额外训练；（2）通过构建实现规范性，这是一种保证规范输出的模型参数化，但需要训练。我们证明，修复规范性错误可以提高几个模型和语料库的held-out数据的可能性。", "summary": "本文提出了两种方法来强制执行token级别语言模型的规范性，确保只有规范token字符串被分配正概率。这两种方法分别是：通过条件反射实现规范性和通过构建实现规范性。实验结果表明，修复规范性错误可以提高模型在held-out数据上的表现。", "keywords": "语言模型, 字节对编码, 规范性", "comments": "该论文针对语言模型中存在的非规范token编码问题，提出了有效的解决方案，具有一定的创新性和实用价值。"}}
